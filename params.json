{"name":"retsu","tagline":"Array micro library focused on speed","body":"## API\r\nExamples are provided with the included documentation, found in `./doc`.\r\n\r\n#### add(obj, arg)\r\nAdds `arg` to `obj` if it is not found in `obj`\r\n\r\n#### binIndex(obj, arg)\r\nPerforms a binary search on `obj` (must be sorted) for `arg`\r\n\r\n#### cast(obj[, keys])\r\nReturns an Object ( NodeList, etc. ) as an Array; if `keys` is true you will get the keys of the Object\r\n\r\n#### chunk(obj, size)\r\nTransforms an Array to a 2D Array of chunks\r\n\r\n#### clear(obj)\r\nClears an Array without destroying it\r\n\r\n#### clone(obj[, shallow])\r\nClones an Array, `shallow` defaults to `true`\r\n\r\n#### contains(obj, arg)\r\nDetermines if `obj` contains `arg`\r\n\r\n#### collect(obj, fn)\r\nCreates a new Array of the result of `fn` executed against every index of `obj`\r\n\r\n#### compact(obj[, diff])\r\nCompacts a Array by removing `null` or `undefined` indices; returns `null` if `diff` is `true` and there is no difference\r\n\r\n#### count(obj, arg)\r\nCounts the occurrence of `arg` in `obj`\r\n\r\n#### diff(obj1, obj2)\r\nFinds the difference between two Arrays\r\n\r\n#### each(obj, fn[, async, size])\r\nIterates `obj` and executes `fn` with arguments [`value`, `index`]; returning `false` from `fn` halts iteration\r\n\r\n#### eachReverse(obj, fn[, async, size])\r\nLike `each()`, but in reverse\r\n\r\n#### empty(obj)\r\nDetermines if an Array is empty\r\n\r\n#### equal(obj1, obj2)\r\nDetermines if two Arrays are equal\r\n\r\n#### fill(obj, arg[, start, offset])\r\nFills `obj` with the evalution of `arg`, optionally from `start` to `offset`\r\n\r\n#### first(obj)\r\nReturns the first index\r\n\r\n#### flat(obj)\r\nFlattens a 2D Array\r\n\r\n#### forEach(obj, fn[, async, size])\r\nLike `each()`, iterates `obj` and executes `fn` with arguments [`value`, `index`]; returning `false` from `fn` halts iteration\r\n\r\n#### fromObject(obj)\r\nCreates a 2D Array from an Object\r\n\r\n#### index(obj, arg)\r\nFacade of `indexOf()`\r\n\r\n#### indexed(obj)\r\nReturns an Associative Array as an Indexed Array\r\n\r\n#### intersect(obj1, obj2)\r\nFinds the intersections between two Arrays\r\n\r\n#### keepIf(obj, fn)\r\nResizes `obj` by keeping every index which `fn` evaluates to `true`\r\n\r\n#### keys(obj)\r\nReturns the keys in an Associative Array, e.g. an Object\r\n\r\n#### keySort(obj, clause)\r\nSorts an Array based on key values, like an SQL ORDER BY clause\r\n\r\n#### last(obj[, offset])\r\nReturns the last index of the Array, with an optional `offset` from the end to retrieve a range\r\n\r\n#### limit(obj, start, offset)\r\nReturns a limited range of indices from the Array\r\n\r\n#### max(obj)\r\nFinds the maximum value in an Array\r\n\r\n#### mean(obj)\r\nFinds the mean of an Array\r\n\r\n#### median(obj)\r\nFinds the median value of an Array\r\n\r\n#### merge(obj1, obj2)\r\nMerges `obj2` into `obj1`, excluding duplicate indices\r\n\r\n#### min(obj)\r\nFinds the minimum value in an Array\r\n\r\n#### mingle(obj1, obj2)\r\nMingles Arrays and returns a 2D Array, corresponding index positions are paired\r\n\r\n#### mode(obj)\r\nFinds the mode value of an Array\r\n\r\n#### range(obj)\r\nFinds the range of the Array\r\n\r\n#### rassoc(obj, arg)\r\nSearches a 2D Array `obj` for the first match of `arg` as a second index\r\n\r\n#### reject(obj, fn)\r\nReturns Array containing the items in `obj` for which `fn` is not true\r\n\r\n#### remove(obj, start, end)\r\nRemoves indices from an Array without recreating it\r\n\r\n#### removeIf(obj, fn)\r\nDeletes every index of `obj` for which `fn` evaluates to true\r\n\r\n#### removeWhile(obj, fn)\r\nDeletes indices of `obj` until `fn` evaluates to false\r\n\r\n#### replace(obj1, obj2)\r\nReplaces the contents of `obj1` with `obj2`\r\n\r\n#### rest(obj[, offset])\r\nReturns the \"rest\" of `obj`, `offset` defaults to 1\r\n\r\n#### rindex(obj, arg)\r\nFinds the last index of `arg` in `obj`\r\n\r\n#### rotate(obj, arg)\r\nReturns new Array with `arg` moved to the first index\r\n\r\n#### series(start, end[, offset])\r\nGenerates a series Array\r\n\r\n#### sort()\r\nSorts the Array by parsing values, to be used with `[].sort()`\r\n\r\n#### sorted(obj)\r\nSorts `obj` using `sort`\r\n\r\n#### split(obj, arg)\r\nSplits an Array by divisor `arg`, e.g. `retsu.split(new Array(100), 21)`\r\n\r\n#### stddev(obj)\r\nFinds the standard deviation of an Array\r\n\r\n#### sum(obj)\r\nGets the summation of an Array\r\n\r\n#### take(obj, n)\r\nTakes the first `n` indices from `obj`\r\n\r\n#### toObject(obj)\r\nCasts an Array to Object\r\n\r\n#### total(obj)\r\nGets the total keys in an Array\r\n\r\n#### unique(obj)\r\nReturns an Array of unique indices of `obj`\r\n\r\n#### variance(obj)\r\nFinds the variance of an Array\r\n\r\n#### zip(obj, args)\r\nConverts `args` to Array, then merges elements of `obj` with corresponding elements from each argument\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}