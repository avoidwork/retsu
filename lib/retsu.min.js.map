{"version":3,"file":"retsu.min.js","sources":["retsu.js"],"names":["global","server","undefined","process","slice","Array","prototype","array","add","obj","arg","contains","push","binIndex","idx","val","min","max","length","Math","floor","cast","key","o","isNaN","keys","utility","iterate","i","call","chunk","size","result","nth","number","round","start","limit","clear","remove","clone","shallow","indexOf","collect","fn","compact","diff","filter","regex","null_undefined","test","count","value","obj1","obj2","each","async","offset","repeat","eachReverse","empty","equal","json","encode","fill","l","first","flat","reduce","a","b","concat","forEach","fromObject","mingle","index","indexed","v","item","next","itr","iterator","done","n","intersect","keepIf","Object","keySort","query","sub","replace","queries","string","explode","map","split","sorts","braceS","braceE","s","e","not_dotnotation","sort","Function","join","last","mean","sum","median","mid","sorted","odd","merge","mode","values","k","parse","range","rassoc","reject","end","remaining","apply","removeIf","removeWhile","rest","rindex","rotate","series","ceil","c","d","types","toString","divisor","total","low","lower","lowered","stddev","sqrt","variance","prev","cur","take","toObject","ar","unique","math","sqr","version","zip","args","x","decode","silent","JSON","error","arguments","this","stringify","label","expectedNumber","invalidArguments","pow","num1","num2","Error","abs","even","base","parseFloat","parseInt","direction","isEmpty","toFixed","down","bool","primitive","space_hyphen","url","trim","RegExp","timer","repeating","clearTimers","id","clearTimeout","Document","xml","__proto__","extend","defer","ms","op","uuid","setTimeout","scope","warning","message","stack","timestamp","Date","toUTCString","type","log","create","target","ts","msg","console","toLocaleTimeString","y","now","recursive","strip","random","substring","r","substr","DOMParser","parseFromString","wrap","node","top","name","output","cdata","XMLSerializer","serializeToString","boolean_number_string","valid","getElementsByTagName","exports","module","define","retsu"],"mappings":"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","sourcesContent":["/**\n * Array micro library focused on speed\n *\n * @author Jason Mulligan <jason.mulligan@avoidwork.com>\n * @copyright 2015 Jason Mulligan\n * @license BSD-3 <https://raw.github.com/avoidwork/retsu/master/LICENSE>\n * @link http://avoidwork.github.io/retsu\n * @module retsu\n * @version 1.1.0\n */\n( function ( global ) {\n\t\"use strict\";\n\n\tvar server = typeof process !== undefined,\n\t\tslice = Array.prototype.slice;\n\n/**\n * @namespace array\n */\nvar array = {\n\t/**\n\t * Adds 'arg' to 'obj' if it is not found\n\t *\n\t * @method add\n\t * @memberOf array\n\t * @param  {Array} obj Array to receive 'arg'\n\t * @param  {Mixed} arg Argument to set in 'obj'\n\t * @return {Array}     Array that was queried\n\t * @example\n\t * var myArray = [1, 2];\n\t *\n\t * array.add( myArray, 3 ); // [1, 2, 3]\n\t * array.add( myArray, 1 ); // [1, 2, 3]\n\t */\n\tadd: function ( obj, arg ) {\n\t\tif ( !array.contains( obj, arg ) ) {\n\t\t\tobj.push( arg );\n\t\t}\n\n\t\treturn obj;\n\t},\n\n\t/**\n\t * Performs a binary search on a sorted Array\n\t *\n\t * @method binIndex\n\t * @memberOf array\n\t * @param  {Array} obj Array to search\n\t * @param  {Mixed} arg Value to find index of\n\t * @return {Number}    Index of `arg` within `obj`\n\t * @example\n\t * var myArray = [1, 5, 10, 15, 20, 25, ...];\n\t *\n\t * array.binIndex( myArray, 5 ); // 1\n\t */\n\tbinIndex: function ( obj, arg ) {\n\t\tvar min = 0,\n\t\t\tmax = obj.length - 1,\n\t\t\tidx, val;\n\n\t\twhile ( min <= max ) {\n\t\t\tidx = Math.floor( ( min + max ) / 2 );\n\t\t\tval = obj[ idx ];\n\n\t\t\tif ( val < arg ) {\n\t\t\t\tmin = idx + 1;\n\t\t\t}\n\t\t\telse if ( val > arg ) {\n\t\t\t\tmax = idx - 1;\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn idx;\n\t\t\t}\n\t\t}\n\n\t\treturn -1;\n\t},\n\n\t/**\n\t * Returns an Object ( NodeList, etc. ) as an Array\n\t *\n\t * @method cast\n\t * @memberOf array\n\t * @param  {Object}  obj Object to cast\n\t * @param  {Boolean} key [Optional] Returns key or value, only applies to Objects without a length property\n\t * @return {Array}       Object as an Array\n\t * @example\n\t * array.cast( document.querySelectorAll( \"...\" ) );\n\t */\n\tcast: function ( obj, key ) {\n\t\tkey = ( key === true );\n\t\tvar o = [];\n\n\t\tif ( !isNaN( obj.length ) ) {\n\t\t\to = slice.call( obj );\n\t\t}\n\t\telse if ( key ) {\n\t\t\to = array.keys( obj );\n\t\t}\n\t\telse {\n\t\t\tutility.iterate( obj, function ( i ) {\n\t\t\t\to.push( i );\n\t\t\t} );\n\t\t}\n\n\t\treturn o;\n\t},\n\n\t/**\n\t * Transforms an Array to a 2D Array of chunks\n\t *\n\t * @method chunk\n\t * @memberOf array\n\t * @param  {Array}  obj  Array to process\n\t * @param  {Number} size Chunk size ( integer )\n\t * @return {Array}       Chunked Array\n\t * @example\n\t * array.chunk( [0, 1, 2, 3], 2 ); // [[0, 1], [2, 3]]\n\t */\n\tchunk: function ( obj, size ) {\n\t\tvar result = [],\n\t\t\tnth = number.round( ( obj.length / size ), \"up\" ),\n\t\t\tstart = 0,\n\t\t\ti = -1;\n\n\t\twhile ( ++i < nth ) {\n\t\t\tstart = i * size;\n\t\t\tresult.push( array.limit( obj, start, size ) );\n\t\t}\n\n\t\treturn result;\n\t},\n\n\t/**\n\t * Clears an Array without destroying it\n\t *\n\t * @method clear\n\t * @memberOf array\n\t * @param  {Array} obj Array to clear\n\t * @return {Array}     Cleared Array\n\t * @example\n\t * var myArray = [1, 2, 3, 4, 5];\n\t *\n\t * array.clear( myArray );\n\t * myarray.length; // 0\n\t */\n\tclear: function ( obj ) {\n\t\treturn obj.length > 0 ? array.remove( obj, 0, obj.length ) : obj;\n\t},\n\n\t/**\n\t * Clones an Array\n\t *\n\t * @method clone\n\t * @memberOf array\n\t * @param  {Array}   obj     Array to clone\n\t * @param  {Boolean} shallow [Optional] Default is `true`\n\t * @return {Array}           Clone of Array\n\t * @example\n\t * var myArray      = [1, 2, 3, 4, 5],\n\t *     myArrayClone = array.clone( myArray );\n\t *\n\t * myArrayClone.push( 6 );\n\t *\n\t * myarray.length;      // 5\n\t * myArrayClone.length; // 6\n\t */\n\tclone: function ( obj, shallow ) {\n\t\treturn utility.clone( obj, shallow !== false );\n\t},\n\n\t/**\n\t * Determines if obj contains arg\n\t *\n\t * @method contains\n\t * @memberOf array\n\t * @param  {Array} obj Array to search\n\t * @param  {Mixed} arg Value to look for\n\t * @return {Boolean}   True if found, false if not\n\t * @example\n\t * if ( array.contains( [1], 1 ) ) { ... }\n\t */\n\tcontains: function ( obj, arg ) {\n\t\treturn obj.indexOf( arg ) > -1;\n\t},\n\n\t/**\n\t * Creates a new Array of the result of `fn` executed against every index of `obj`\n\t *\n\t * @method collect\n\t * @memberOf array\n\t * @param  {Array}    obj Array to iterate\n\t * @param  {Function} fn  Function to execute against indices\n\t * @return {Array}        New Array\n\t * @example\n\t * var results = array.collect( [...], function ( ... ) { ... } );\n\t */\n\tcollect: function ( obj, fn ) {\n\t\tvar result = [];\n\n\t\tarray.iterate( obj, function ( i ) {\n\t\t\tresult.push( fn( i ) );\n\t\t} );\n\n\t\treturn result;\n\t},\n\n\t/**\n\t * Compacts a Array by removing `null` or `undefined` indices\n\t *\n\t * @method compact\n\t * @memberOf array\n\t * @param  {Array}   obj  Array to compact\n\t * @param  {Boolean} diff Indicates to return resulting Array only if there's a difference\n\t * @return {Array}        Compacted copy of `obj`, or null ( if `diff` is passed & no diff is found )\n\t * @example\n\t * array.compact( [null, \"a\", \"b\", \"c\", null, \"d\"] ); // [\"a\", \"b\", \"c\", \"d\"]\n\t * array.compact( [\"a\", \"b\", \"c\", \"d\"], true );       // null\n\t */\n\tcompact: function ( obj, diff ) {\n\t\tdiff = ( diff === true );\n\t\tvar result;\n\n\t\tresult = obj.filter( function ( i ) {\n\t\t\treturn !regex.null_undefined.test( i );\n\t\t} );\n\n\t\treturn !diff ? result : ( result.length < obj.length ? result : null );\n\t},\n\n\t/**\n\t * Counts `value` in `obj`\n\t *\n\t * @method count\n\t * @memberOf array\n\t * @param  {Array} obj   Array to search\n\t * @param  {Mixed} value Value to compare\n\t * @return {Array}       Array of counts\n\t * @example\n\t * array.count( [\"apple\", \"banana\", \"orange\", \"apple\"], \"apple\" ); // 2\n\t */\n\tcount: function ( obj, value ) {\n\t\treturn obj.filter( function ( i ) {\n\t\t\treturn ( i === value );\n\t\t} ).length;\n\t},\n\n\t/**\n\t * Finds the difference between two Arrays\n\t *\n\t * @method diff\n\t * @memberOf array\n\t * @param  {Array} obj1 Source Array\n\t * @param  {Array} obj2 Comparison Array\n\t * @return {Array}      Array of the differences\n\t * @example\n\t * array.diff( [\"a\"], [\"a\", \"b\"] ); // [\"b\"]\n\t */\n\tdiff: function ( obj1, obj2 ) {\n\t\tvar result = [];\n\n\t\tarray.iterate( obj1, function ( i ) {\n\t\t\tif ( !array.contains( obj2, i ) ) {\n\t\t\t\tarray.add( result, i );\n\t\t\t}\n\t\t} );\n\n\t\tarray.iterate( obj2, function ( i ) {\n\t\t\tif ( !array.contains( obj1, i ) ) {\n\t\t\t\tarray.add( result, i );\n\t\t\t}\n\t\t} );\n\n\t\treturn result;\n\t},\n\n\t/**\n\t * Iterates `obj` and executes `fn` with arguments [`value`, `index`].\n\t * Returning `false` halts iteration.\n\t *\n\t * @method each\n\t * @memberOf array\n\t * @param  {Array}    obj   Array to iterate\n\t * @param  {Function} fn    Function to execute on index values\n\t * @param  {Boolean}  async [Optional] Asynchronous iteration\n\t * @param  {Number}   size  [Optional] Batch size for async iteration, default is 10\n\t * @return {Array}          Array\n\t * @example\n\t * array.iterate( [ ... ], function ( ... ) { ... } );\n\t * array.iterate( [ ... ], function ( ... ) { ... }, true, 100 ); // processing batches of a 100\n\t */\n\teach: function ( obj, fn, async, size ) {\n\t\tvar nth = obj.length,\n\t\t\ti, offset;\n\n\t\tif ( async !== true ) {\n\t\t\ti = -1;\n\t\t\twhile ( ++i < nth ) {\n\t\t\t\tif ( fn.call( obj, obj[ i ], i ) === false ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tsize = size || 10;\n\t\t\toffset = 0;\n\n\t\t\tif ( size > nth ) {\n\t\t\t\tsize = nth;\n\t\t\t}\n\n\t\t\tutility.repeat( function () {\n\t\t\t\tvar i = -1,\n\t\t\t\t\tidx;\n\n\t\t\t\twhile ( ++i < size ) {\n\t\t\t\t\tidx = i + offset;\n\n\t\t\t\t\tif ( idx === nth || fn.call( obj, obj[ idx ], idx ) === false ) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\toffset += size;\n\n\t\t\t\tif ( offset >= nth ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}, undefined, undefined, false );\n\t\t}\n\n\t\treturn obj;\n\t},\n\n\t/**\n\t * Iterates `obj` in reverse and executes `fn` with arguments [`value`, `index`].\n\t * Returning `false` halts iteration.\n\t *\n\t * @method eachReverse\n\t * @memberOf array\n\t * @param  {Array}    obj   Array to iterate\n\t * @param  {Function} fn    Function to execute on index values\n\t * @param  {Boolean}  async [Optional] Asynchronous iteration\n\t * @param  {Number}   size  [Optional] Batch size for async iteration, default is 10\n\t * @return {Array}          Array\n\t * @example\n\t * array.eachReverse( [ ... ], function ( ... ) { ... } );\n\t * array.eachReverse( [ ... ], function ( ... ) { ... }, true, 100 ); // processing batches of a 100\n\t */\n\teachReverse: function ( obj, fn, async, size ) {\n\t\tvar nth = obj.length,\n\t\t\ti, offset;\n\n\t\tif ( async !== true ) {\n\t\t\ti = nth;\n\t\t\twhile ( --i > -1 ) {\n\t\t\t\tif ( fn.call( obj, obj[ i ], i ) === false ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tsize = size || 10;\n\t\t\toffset = nth - 1;\n\n\t\t\tif ( size > nth ) {\n\t\t\t\tsize = nth;\n\t\t\t}\n\n\t\t\tutility.repeat( function () {\n\t\t\t\tvar i = -1,\n\t\t\t\t\tidx;\n\n\t\t\t\twhile ( ++i < size ) {\n\t\t\t\t\tidx = offset - i;\n\n\t\t\t\t\tif ( idx < 0 || fn.call( obj, obj[ idx ], idx ) === false ) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\toffset -= size;\n\n\t\t\t\tif ( offset < 0 ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}, undefined, undefined, false );\n\t\t}\n\n\t\treturn obj;\n\t},\n\n\t/**\n\t * Determines if an Array is empty\n\t *\n\t * @method empty\n\t * @memberOf array\n\t * @param  {Array} obj Array to inspect\n\t * @return {Boolean}   `true` if there's no indices\n\t * @example\n\t * array.empty( [] );    // true\n\t * array.empty( [\"a\"] ); // false\n\t */\n\tempty: function ( obj ) {\n\t\treturn ( obj.length === 0 );\n\t},\n\n\t/**\n\t * Determines if two Arrays are equal\n\t *\n\t * @method equal\n\t * @memberOf array\n\t * @param  {Array} obj1 Array to compare\n\t * @param  {Array} obj2 Array to compare\n\t * @return {Boolean} `true` if the Arrays match\n\t * @example\n\t * array.equal( [\"a\"], [\"a\"] );      // true\n\t * array.equal( [\"a\"], [\"a\", \"b\"] ); // false\n\t */\n\tequal: function ( obj1, obj2 ) {\n\t\treturn ( json.encode( obj1 ) === json.encode( obj2 ) );\n\t},\n\n\t/**\n\t * Fills `obj` with the evalution of `arg`, optionally from `start` to `offset`\n\t *\n\t * @method fill\n\t * @memberOf array\n\t * @param  {Array}  obj   Array to fill\n\t * @param  {Mixed}  arg   String, Number of Function to fill with\n\t * @param  {Number} start [Optional] Index to begin filling at\n\t * @param  {Number} end   [Optional] Offset from start to stop filling at\n\t * @return {Array}        Filled Array\n\t * @example\n\t * var myArray = [\"a\", \"b\", \"c\"];\n\t *\n\t * array.fill( myArray, function ( i ) { return i + \"a\"; } );\n\t * myArray[0]; // \"aa\"\n\t */\n\tfill: function ( obj, arg, start, offset ) {\n\t\tvar fn = typeof arg == \"function\",\n\t\t\tl = obj.length,\n\t\t\ti = !isNaN( start ) ? start : 0,\n\t\t\tnth = !isNaN( offset ) ? i + offset : l - 1;\n\n\t\tif ( nth > ( l - 1 ) ) {\n\t\t\tnth = l - 1;\n\t\t}\n\n\t\twhile ( i <= nth ) {\n\t\t\tobj[ i ] = fn ? arg( obj[ i ] ) : arg;\n\t\t\ti++;\n\t\t}\n\n\t\treturn obj;\n\t},\n\n\t/**\n\t * Returns the first Array index\n\t *\n\t * @method first\n\t * @memberOf array\n\t * @param  {Array} obj The array\n\t * @return {Mixed}     The first node of the array\n\t * @example\n\t * array.first( [\"a\", \"b\"] ); // \"a\"\n\t */\n\tfirst: function ( obj ) {\n\t\treturn obj[ 0 ];\n\t},\n\n\t/**\n\t * Flattens a 2D Array\n\t *\n\t * @method flat\n\t * @memberOf array\n\t * @param  {Array} obj 2D Array to flatten\n\t * @return {Array}     Flatten Array\n\t * @example\n\t * array.flat( [[0, 1], [2, 3]] ); // [0, 1, 2, 3]\n\t */\n\tflat: function ( obj ) {\n\t\tvar result = [];\n\n\t\tresult = obj.reduce( function ( a, b ) {\n\t\t\treturn a.concat( b );\n\t\t}, result );\n\n\t\treturn result;\n\t},\n\n\t/**\n\t * Iterates `obj` and executes `fn` with arguments [`value`, `index`].\n\t * Returning `false` halts iteration.\n\t *\n\t * @method forEach\n\t * @memberOf array\n\t * @see array.each\n\t * @param  {Array}    obj   Array to iterate\n\t * @param  {Function} fn    Function to execute on index values\n\t * @param  {Boolean}  async [Optional] Asynchronous iteration\n\t * @param  {Number}   size  [Optional] Batch size for async iteration, default is 10\n\t * @return {Array}          Array\n\t * @example\n\t * array.forEach( [ ... ], function ( ... ) { ... } );\n\t * array.forEach( [ ... ], function ( ... ) { ... }, true, 100 ); // processing batches of a 100\n\t */\n\tforEach: function ( obj, fn, async, size ) {\n\t\treturn array.each( obj, fn, async, size );\n\t},\n\n\t/**\n\t * Creates a 2D Array from an Object\n\t *\n\t * @method fromObject\n\t * @memberOf array\n\t * @param  {Object} obj Object to convert\n\t * @return {Array}      2D Array\n\t * @example\n\t * array.fromObject( {name: \"John\", sex: \"male\"} ); // [[\"name\", \"John\"], [\"sex\", \"male\"]]\n\t */\n\tfromObject: function ( obj ) {\n\t\treturn array.mingle( array.keys( obj ), array.cast( obj ) );\n\t},\n\n\t/**\n\t * Facade of indexOf\n\t *\n\t * @method index\n\t * @memberOf array\n\t * @param  {Array} obj Array to search\n\t * @param  {Mixed} arg Value to find index of\n\t * @return {Number}    The position of arg in instance\n\t * @example\n\t * array.index( [\"a\", \"b\", \"c\"], \"b\" ); // 1\n\t */\n\tindex: function ( obj, arg ) {\n\t\treturn obj.indexOf( arg );\n\t},\n\n\t/**\n\t * Returns an Associative Array as an Indexed Array\n\t *\n\t * @method indexed\n\t * @memberOf array\n\t * @param  {Array} obj Array to index\n\t * @return {Array}     Indexed Array\n\t * @example\n\t * var myArray = [\"a\", \"b\", \"c\"];\n\t *\n\t * myarray.prop = \"d\";\n\t * array.indexed( myArray ); [\"a\", \"b\", \"c\", \"d\"];\n\t */\n\tindexed: function ( obj ) {\n\t\tvar indexed = [];\n\n\t\tutility.iterate( obj, function ( v ) {\n\t\t\tindexed.push( v );\n\t\t} );\n\n\t\treturn indexed;\n\t},\n\n\t/**\n\t * Iterates an Array using an Iterator\n\t *\n\t * @method iterate\n\t * @memberOf array\n\t * @param  {Array} obj Array to iterate\n\t * @return {Array}     Array to iterate\n\t */\n\titerate: function ( obj, fn ) {\n\t\tvar itr = array.iterator( obj ),\n\t\t\ti = -1,\n\t\t\titem, next;\n\n\t\tdo {\n\t\t\titem = itr.next();\n\n\t\t\tif ( !item.done ) {\n\t\t\t\tnext = fn( item.value, ++i );\n\t\t\t}\n\t\t\telse {\n\t\t\t\tnext = false;\n\t\t\t}\n\t\t} while ( next !== false );\n\n\t\treturn obj;\n\t},\n\n\t/**\n\t * Creates an Array generator to iterate the indices\n\t *\n\t * @method iterator\n\t * @memberOf array\n\t * @param  {Array} obj Array to iterate\n\t * @return {Function}  Generator\n\t */\n\titerator: function ( obj ) {\n\t\tvar i = -1,\n\t\t\tn = obj.length;\n\n\t\treturn {\n\t\t\tnext: function () {\n\t\t\t\tif ( ++i < n ) {\n\t\t\t\t\treturn { done: false, value: obj[ i ] };\n\t\t\t\t} else {\n\t\t\t\t\treturn { done: true };\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t},\n\n\t/**\n\t * Finds the intersections between two Arrays\n\t *\n\t * @method intersect\n\t * @memberOf array\n\t * @param  {Array} obj1 Source Array\n\t * @param  {Array} obj2 Comparison Array\n\t * @return {Array}      Array of the intersections\n\t * @example\n\t * array.intersect( [\"a\", \"b\", \"d\"], [\"b\", \"c\", \"d\"] ); // [\"b\", \"d\"]\n\t */\n\tintersect: function ( obj1, obj2 ) {\n\t\tvar a = obj1.length > obj2.length ? obj1 : obj2,\n\t\t\tb = ( a === obj1 ? obj2 : obj1 );\n\n\t\treturn a.filter( function ( key ) {\n\t\t\treturn array.contains( b, key );\n\t\t} );\n\t},\n\n\t/**\n\t * Resizes `obj` by keeping every index which `fn` evaluates to `true`\n\t *\n\t * @method keepIf\n\t * @memberOf array\n\t * @param  {Array}    obj Array to iterate\n\t * @param  {Function} fn  Function to test indices against\n\t * @return {Array}        Array\n\t * @example\n\t * var myArray = [\"a\", \"b\", \"c\"];\n\t *\n\t * array.keepIf( myArray, function ( i ) { return /a|c/.test( i ); } );\n\t * myArray[1]; // \"c\"\n\t */\n\tkeepIf: function ( obj, fn ) {\n\t\tvar result = obj.filter( fn ),\n\t\t\tremove = array.diff( obj, result );\n\n\t\tarray.iterate( remove, function ( i ) {\n\t\t\tarray.remove( obj, array.index( obj, i ) );\n\t\t} );\n\n\t\treturn obj;\n\t},\n\n\t/**\n\t * Returns the keys in an \"Associative Array\"\n\t *\n\t * @method keys\n\t * @memberOf array\n\t * @param  {Mixed} obj Array or Object to extract keys from\n\t * @return {Array}     Array of the keys\n\t * @example\n\t * array.keys( {abc: true, xyz: false} ); // [\"abc\", \"xyz\"]\n\t */\n\tkeys: function ( obj ) {\n\t\treturn Object.keys( obj );\n\t},\n\n\t/**\n\t * Sorts an Array based on key values, like an SQL ORDER BY clause\n\t *\n\t * @method keySort\n\t * @memberOf array\n\t * @param  {Array}  obj   Array to sort\n\t * @param  {String} query Sort query, e.g. \"name, age desc, country\"\n\t * @param  {String} sub   [Optional] Key which holds data, e.g. \"{data: {}}\" = \"data\"\n\t * @return {Array}        Sorted Array\n\t * @example\n\t * var myArray = [{abc: 123124, xyz: 5}, {abc: 123124, xyz: 6}, {abc: 2, xyz: 5}];\n\t *\n\t * array.keySort( myArray, \"abc\" );           // [{abc: 2, xyz: 5}, {abc: 123124, xyz: 5}, {abc: 123124, xyz: 6}];\n\t * array.keySort( myArray, \"abc, xyz desc\" ); // [{abc: 2, xyz: 5}, {abc: 123124, xyz: 6}, {abc: 123124, xyz: 5}];\n\t */\n\tkeySort: function ( obj, query, sub ) {\n\t\tquery = query.replace( /\\s*asc/ig, \"\" ).replace( /\\s*desc/ig, \" desc\" );\n\t\tvar queries = string.explode( query ).map( function ( i ) {\n\t\t\t\treturn i.split( \" \" );\n\t\t\t} ),\n\t\t\tsorts = [],\n\t\t\tbraceS = \"[\\\"\",\n\t\t\tbraceE = \"\\\"]\";\n\n\t\tif ( sub && sub !== \"\" ) {\n\t\t\tsub = \".\" + sub;\n\t\t}\n\t\telse {\n\t\t\tsub = \"\";\n\t\t}\n\n\t\tarray.iterate( queries, function ( i ) {\n\t\t\tvar s = \".\",\n\t\t\t\te = \"\";\n\n\t\t\tif ( regex.not_dotnotation.test( i[ 0 ] ) ) {\n\t\t\t\ts = braceS;\n\t\t\t\te = braceE;\n\t\t\t}\n\n\t\t\tsorts.push( \"try {\" );\n\n\t\t\tif ( i[ 1 ] === \"desc\" ) {\n\t\t\t\tsorts.push( \"if ( a\" + sub + s + i[ 0 ] + e + \" < b\" + sub + s + i[ 0 ] + e + \" ) return 1;\" );\n\t\t\t\tsorts.push( \"if ( a\" + sub + s + i[ 0 ] + e + \" > b\" + sub + s + i[ 0 ] + e + \" ) return -1;\" );\n\t\t\t}\n\t\t\telse {\n\t\t\t\tsorts.push( \"if ( a\" + sub + s + i[ 0 ] + e + \" < b\" + sub + s + i[ 0 ] + e + \" ) return -1;\" );\n\t\t\t\tsorts.push( \"if ( a\" + sub + s + i[ 0 ] + e + \" > b\" + sub + s + i[ 0 ] + e + \" ) return 1;\" );\n\t\t\t}\n\n\t\t\tsorts.push( \"} catch (e) {\" );\n\t\t\tsorts.push( \"try {\" );\n\t\t\tsorts.push( \"if ( a\" + sub + s + i[ 0 ] + e + \" !== undefined ) return \" + ( i[ 1 ] === \"desc\" ? \"-1\" : \"1\") + \";\" );\n\t\t\tsorts.push( \"} catch (e) {}\" );\n\t\t\tsorts.push( \"try {\" );\n\t\t\tsorts.push( \"if ( b\" + sub + s + i[ 0 ] + e + \" !== undefined ) return \" + ( i[ 1 ] === \"desc\" ? \"1\" : \"-1\") + \";\" );\n\t\t\tsorts.push( \"} catch (e) {}\" );\n\t\t\tsorts.push( \"}\" );\n\t\t} );\n\n\t\tsorts.push( \"return 0;\" );\n\n\t\treturn obj.sort( new Function( \"a\", \"b\", sorts.join( \"\\n\" ) ) );\n\t},\n\n\t/**\n\t * Returns the last index of the Array\n\t *\n\t * @method last\n\t * @memberOf array\n\t * @param  {Array}  obj Array\n\t * @param  {Number} arg [Optional] Negative offset from last index to return\n\t * @return {Mixed}      Last index( s ) of Array\n\t * @example\n\t * var myArray = [1, 2, 3, 4];\n\t *\n\t * array.last( myArray );    // 4\n\t * array.last( myArray, 2 ); // [3, 4]\n\t */\n\tlast: function ( obj, arg ) {\n\t\tvar n = obj.length - 1;\n\n\t\tif ( arg >= ( n + 1 ) ) {\n\t\t\treturn obj;\n\t\t}\n\t\telse if ( isNaN( arg ) || arg === 1 ) {\n\t\t\treturn obj[ n ];\n\t\t}\n\t\telse {\n\t\t\treturn array.limit( obj, ( n - ( --arg ) ), n );\n\t\t}\n\t},\n\n\t/**\n\t * Returns a limited range of indices from the Array\n\t *\n\t * @method limit\n\t * @memberOf array\n\t * @param  {Array}  obj    Array to iterate\n\t * @param  {Number} start  Starting index\n\t * @param  {Number} offset Number of indices to return\n\t * @return {Array}         Array of indices\n\t * @example\n\t * var myArray = [1, 2, 3, 4];\n\t *\n\t * array.limit( myArray, 0, 2 ); // [1, 2]\n\t * array.limit( myArray, 2, 2 ); // [3, 4]\n\t */\n\tlimit: function ( obj, start, offset ) {\n\t\tvar result = [],\n\t\t\ti = start - 1,\n\t\t\tnth = start + offset,\n\t\t\tmax = obj.length;\n\n\t\tif ( max > 0 ) {\n\t\t\twhile ( ++i < nth && i < max ) {\n\t\t\t\tresult.push( obj[ i ] );\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t},\n\n\t/**\n\t * Finds the maximum value in an Array\n\t *\n\t * @method max\n\t * @memberOf array\n\t * @param  {Array} obj Array to process\n\t * @return {Mixed}     Number, String, etc.\n\t * @example\n\t * array.max( [5, 3, 9, 1, 4] ); // 9\n\t */\n\tmax: function ( obj ) {\n\t\treturn array.last( obj.sort( array.sort ) );\n\t},\n\n\t/**\n\t * Finds the mean of an Array\n\t *\n\t * @method mean\n\t * @memberOf array\n\t * @param  {Array} obj Array to process\n\t * @return {Number}    Mean of the Array ( float or integer )\n\t * @example\n\t * array.mean( [1, 3, 5] ); // 3\n\t */\n\tmean: function ( obj ) {\n\t\treturn obj.length > 0 ? ( array.sum( obj ) / obj.length ) : undefined;\n\t},\n\n\t/**\n\t * Finds the median value of an Array\n\t *\n\t * @method median\n\t * @memberOf array\n\t * @param  {Array} obj Array to process\n\t * @return {Number}    Median number of the Array ( float or integer )\n\t * @example\n\t * array.median( [5, 1, 3, 8] ); // 4\n\t * array.median( [5, 1, 3] );    // 3\n\t */\n\tmedian: function ( obj ) {\n\t\tvar nth = obj.length,\n\t\t\tmid = number.round( nth / 2, \"down\" ),\n\t\t\tsorted = obj.sort( array.sort );\n\n\t\treturn number.odd( nth ) ? sorted[ mid ] : ( ( sorted[ mid - 1 ] + sorted[ mid ] ) / 2 );\n\t},\n\n\t/**\n\t * Merges `obj2` into `obj1`, excluding duplicate indices\n\t *\n\t * @method merge\n\t * @memberOf array\n\t * @param  {Array} obj1 Array to receive indices\n\t * @param  {Array} obj2 Array to merge\n\t * @return {Array}      First argument\n\t * @example\n\t * var a = [\"a\", \"b\", \"c\"],\n\t *     b = [\"d\"];\n\t *\n\t * array.merge( a, b );\n\t * a[3]; // \"d\"\n\t */\n\tmerge: function ( obj1, obj2 ) {\n\t\tarray.iterate( obj2, function ( i ) {\n\t\t\tarray.add( obj1, i );\n\t\t} );\n\n\t\treturn obj1;\n\t},\n\n\t/**\n\t * Finds the minimum value in an Array\n\t *\n\t * @method min\n\t * @memberOf array\n\t * @param  {Array} obj Array to process\n\t * @return {Mixed}     Number, String, etc.\n\t * @example\n\t * array.min( [5, 3, 9, 1, 4] ); // 1\n\t */\n\tmin: function ( obj ) {\n\t\treturn obj.sort( array.sort )[ 0 ];\n\t},\n\n\t/**\n\t * Mingles Arrays and returns a 2D Array, corresponding index positions are paired\n\t *\n\t * @method mingle\n\t * @memberOf array\n\t * @param  {Array} obj1 Array to mingle\n\t * @param  {Array} obj2 Array to mingle\n\t * @return {Array}      2D Array\n\t * @example\n\t * var a = [\"a\", \"b\"],\n\t *     b = [\"c\", \"d\"];\n\t *\n\t * array.mingle( a, b ); // [[\"a\", \"c\"], [\"b\", \"d\"]]\n\t */\n\tmingle: function ( obj1, obj2 ) {\n\t\tvar result;\n\n\t\tresult = obj1.map( function ( i, idx ) {\n\t\t\treturn [ i, obj2[ idx ] ];\n\t\t} );\n\n\t\treturn result;\n\t},\n\n\t/**\n\t * Finds the mode value of an Array\n\t *\n\t * @method mode\n\t * @memberOf array\n\t * @param  {Array} obj Array to process\n\t * @return {Mixed}     Mode value of the Array\n\t * @example\n\t * array.mode( [1, 3, 7, 1, 2, 10, 7, 7, 3, 10] );     // 7\n\t * array.mode( [1, 3, 7, 1, 2, 10, 7, 7, 3, 10, 10] ); // [7, 10]\n\t */\n\tmode: function ( obj ) {\n\t\tvar values = {},\n\t\t\tcount = 0,\n\t\t\tmode = [],\n\t\t\tnth, result;\n\n\t\t// Counting values\n\t\tarray.iterate( obj, function ( i ) {\n\t\t\tif ( !isNaN( values[ i ] ) ) {\n\t\t\t\tvalues[ i ]++;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tvalues[ i ] = 1;\n\t\t\t}\n\t\t} );\n\n\t\t// Finding the highest occurring count\n\t\tcount = array.max( array.cast( values ) );\n\n\t\t// Finding values that match the count\n\t\tutility.iterate( values, function ( v, k ) {\n\t\t\tif ( v === count ) {\n\t\t\t\tmode.push( number.parse( k ) );\n\t\t\t}\n\t\t} );\n\n\t\t// Determining the result\n\t\tnth = mode.length;\n\n\t\tif ( nth > 0 ) {\n\t\t\tresult = nth === 1 ? mode[ 0 ] : mode;\n\t\t}\n\n\t\treturn result;\n\t},\n\n\t/**\n\t * Finds the range of the Array\n\t *\n\t * @method range\n\t * @memberOf array\n\t * @param  {Array} obj Array to process\n\t * @return {Number}    Range of the array ( float or integer )\n\t * @example\n\t * array.range( [5, 1, 3, 8] ); // 7\n\t */\n\trange: function ( obj ) {\n\t\treturn array.max( obj ) - array.min( obj );\n\t},\n\n\t/**\n\t * Searches a 2D Array `obj` for the first match of `arg` as a second index\n\t *\n\t * @method rassoc\n\t * @memberOf array\n\t * @param  {Array} obj 2D Array to search\n\t * @param  {Mixed} arg Primitive to find\n\t * @return {Mixed}     Array or undefined\n\t * @example\n\t * array.rassoc( [[1, 3], [7, 2], [4, 3]], 3 ); // [1, 3]\n\t */\n\trassoc: function ( obj, arg ) {\n\t\tvar result;\n\n\t\tarray.iterate( obj, function ( i, idx ) {\n\t\t\tif ( i[ 1 ] === arg ) {\n\t\t\t\tresult = obj[ idx ];\n\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} );\n\n\t\treturn result;\n\t},\n\n\t/**\n\t * Returns Array containing the items in `obj` for which `fn` is not true\n\t *\n\t * @method reject\n\t * @memberOf array\n\t * @param  {Array}    obj Array to iterate\n\t * @param  {Function} fn  Function to execute against `obj` indices\n\t * @return {Array}        Array of indices which fn() is not true\n\t * @example\n\t * array.reject( [0, 1, 2, 3, 4, 5], function ( i ) { return i % 2 > 0; } ); // [0, 2, 4]\n\t */\n\treject: function ( obj, fn ) {\n\t\treturn array.diff( obj, obj.filter( fn ) );\n\t},\n\n\t/**\n\t * Removes indices from an Array without recreating it\n\t *\n\t * @method remove\n\t * @memberOf array\n\t * @param  {Array}  obj   Array to remove from\n\t * @param  {Mixed}  start Starting index, or value to find within obj\n\t * @param  {Number} end   [Optional] Ending index\n\t * @return {Array}        Modified Array\n\t * @example\n\t * var myArray = [\"a\", \"b\", \"c\", \"d\", \"e\"];\n\t *\n\t * array.remove( myArray, 2, 3 );\n\t * myArray[2]; // \"e\"\n\t */\n\tremove: function ( obj, start, end ) {\n\t\tif ( isNaN( start ) ) {\n\t\t\tstart = obj.indexOf( start );\n\n\t\t\tif ( start === -1 ) {\n\t\t\t\treturn obj;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tstart = start || 0;\n\t\t}\n\n\t\tvar length = obj.length,\n\t\t\tremaining = obj.slice( ( end || start ) + 1 || length );\n\n\t\tobj.length = start < 0 ? ( length + start ) : start;\n\t\tobj.push.apply( obj, remaining );\n\n\t\treturn obj;\n\t},\n\n\t/**\n\t * Deletes every index of `obj` for which `fn` evaluates to true\n\t *\n\t * @method removeIf\n\t * @memberOf array\n\t * @param  {Array}    obj Array to iterate\n\t * @param  {Function} fn  Function to test indices against\n\t * @return {Array}        Array\n\t * @example\n\t * var myArray = [\"a\", \"b\", \"c\"];\n\t *\n\t * array.removeIf( myArray, function ( i ) { return /a|c/.test( i ); } );\n\t * myArray[0]; // \"b\"\n\t */\n\tremoveIf: function ( obj, fn ) {\n\t\tvar remove = obj.filter( fn );\n\n\t\tarray.iterate( remove, function ( i ) {\n\t\t\tarray.remove( obj, array.index( obj, i ) );\n\t\t} );\n\n\t\treturn obj;\n\t},\n\n\t/**\n\t * Deletes indices of `obj` until `fn` evaluates to false\n\t *\n\t * @method removeWhile\n\t * @memberOf array\n\t * @param  {Array}    obj Array to iterate\n\t * @param  {Function} fn  Function to test indices against\n\t * @return {Array}        Array\n\t * @example\n\t * var myArray = [\"a\", \"b\", \"c\"];\n\t *\n\t * array.removeWhile( myArray, function ( i ) { return /a|c/.test( i ); } );\n\t * myArray[0];     // \"b\"\n\t * myarray.length; // 2\n\t */\n\tremoveWhile: function ( obj, fn ) {\n\t\tvar remove = [];\n\n\t\tarray.iterate( obj, function ( i ) {\n\t\t\tif ( fn( i ) !== false ) {\n\t\t\t\tremove.push( i );\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} );\n\n\t\tarray.iterate( remove, function ( i ) {\n\t\t\tarray.remove( obj, array.index( obj, i ) );\n\t\t} );\n\n\t\treturn obj;\n\t},\n\n\t/**\n\t * Replaces the contents of `obj1` with `obj2`\n\t *\n\t * @method replace\n\t * @memberOf array\n\t * @param  {Array} obj1 Array to modify\n\t * @param  {Array} obj2 Array to values to push into `obj1`\n\t * @return {Array}      Array to modify\n\t * @example\n\t * var myArray = [\"a\", \"b\", \"c\"];\n\t *\n\t * array.replace( myArray, [true, false] );\n\t * myArray[0];     // true\n\t * myarray.length; // 2\n\t */\n\treplace: function ( obj1, obj2 ) {\n\t\tarray.remove( obj1, 0, obj1.length );\n\t\tarray.iterate( obj2, function ( i ) {\n\t\t\tobj1.push( i );\n\t\t} );\n\n\t\treturn obj1;\n\t},\n\n\t/**\n\t * Returns the \"rest\" of `obj` from `arg`\n\t *\n\t * @method rest\n\t * @memberOf array\n\t * @param  {Array}  obj Array to process\n\t * @param  {Number} arg [Optional] Start position of subset of `obj` ( positive number only )\n\t * @return {Array}      Array of a subset of `obj`\n\t * @example\n\t * array.rest( [1, 2, 3, 4, 5, 6] );    // [2, 3, 4, 5, 6]\n\t * array.rest( [1, 2, 3, 4, 5, 6], 3 ); // [4, 5, 6]\n\t */\n\trest: function ( obj, arg ) {\n\t\targ = arg || 1;\n\n\t\tif ( arg < 1 ) {\n\t\t\targ = 1;\n\t\t}\n\n\t\treturn array.limit( obj, arg, obj.length );\n\t},\n\n\t/**\n\t * Finds the last index of `arg` in `obj`\n\t *\n\t * @method rindex\n\t * @memberOf array\n\t * @param  {Array} obj Array to search\n\t * @param  {Mixed} arg Primitive to find\n\t * @return {Mixed}     Index or undefined\n\t * @example\n\t * array.rindex( [1, 2, 3, 2, 1], 2 ); // 3\n\t */\n\trindex: function ( obj, arg ) {\n\t\tvar result = -1;\n\n\t\tarray.iterate( obj, function ( i, idx ) {\n\t\t\tif ( i === arg ) {\n\t\t\t\tresult = idx;\n\t\t\t}\n\t\t} );\n\n\t\treturn result;\n\t},\n\n\t/**\n\t * Returns new Array with `arg` moved to the first index\n\t *\n\t * @method rotate\n\t * @memberOf array\n\t * @param  {Array}  obj Array to rotate\n\t * @param  {Number} arg Index to become the first index, if negative the rotation is in the opposite direction\n\t * @return {Array}      Newly rotated Array\n\t * @example\n\t * array.rotate( [0, 1, 2, 3, 4],  3 )[0] // 2;\n\t * array.rotate( [0, 1, 2, 3, 4], -2 )[0] // 3;\n\t */\n\trotate: function ( obj, arg ) {\n\t\tvar nth = obj.length,\n\t\t\tresult;\n\n\t\tif ( arg === 0 ) {\n\t\t\tresult = obj;\n\t\t}\n\t\telse {\n\t\t\tif ( arg < 0 ) {\n\t\t\t\targ += nth;\n\t\t\t}\n\t\t\telse {\n\t\t\t\targ--;\n\t\t\t}\n\n\t\t\tresult = array.limit( obj, arg, nth );\n\t\t\tresult = result.concat( array.limit( obj, 0, arg ) );\n\t\t}\n\n\t\treturn result;\n\t},\n\n\t/**\n\t * Generates a series Array\n\t *\n\t * @method series\n\t * @memberOf array\n\t * @param  {Number} start  Start value the series\n\t * @param  {Number} end    [Optional] The end of the series\n\t * @param  {Number} offset [Optional] Offset for indices, default is 1\n\t * @return {Array}         Array of new series\n\t * @example\n\t * array.series( 0, 5 );     // [0, 1, 2, 3, 4]\n\t * array.series( 0, 25, 5 ); // [0, 5, 10, 15, 20]\n\t */\n\tseries: function ( start, end, offset ) {\n\t\tstart = start || 0;\n\t\tend = end || start;\n\t\toffset = offset || 1;\n\t\tvar result = [],\n\t\t\tn = -1,\n\t\t\tnth = Math.max( 0, Math.ceil( ( end - start ) / offset ) );\n\n\t\twhile ( ++n < nth ) {\n\t\t\tresult[ n ] = start;\n\t\t\tstart += offset;\n\t\t}\n\n\t\treturn result;\n\t},\n\n\t/**\n\t * Sorts the Array by parsing values\n\t *\n\t * @method sort\n\t * @memberOf array\n\t * @param  {Mixed} a Argument to compare\n\t * @param  {Mixed} b Argument to compare\n\t * @return {Number}  Number indicating sort order\n\t * @example\n\t * array.sort( 2, 3 ); // -1\n\t */\n\tsort: function ( a, b ) {\n\t\tvar types = { a: typeof a, b: typeof b },\n\t\t\tc, d, result;\n\n\t\tif ( types.a === \"number\" && types.b === \"number\" ) {\n\t\t\tresult = a - b;\n\t\t}\n\t\telse {\n\t\t\tc = a.toString();\n\t\t\td = b.toString();\n\n\t\t\tif ( c < d ) {\n\t\t\t\tresult = -1;\n\t\t\t}\n\t\t\telse if ( c > d ) {\n\t\t\t\tresult = 1;\n\t\t\t}\n\t\t\telse if ( types.a === types.b ) {\n\t\t\t\tresult = 0;\n\t\t\t}\n\t\t\telse if ( types.a === \"boolean\" ) {\n\t\t\t\tresult = -1;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tresult = 1;\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t},\n\n\t/**\n\t * Sorts `obj` using `sort`\n\t *\n\t * @method sorted\n\t * @memberOf array\n\t * @param  {Array} obj Array to sort\n\t * @return {Array}     Sorted Array\n\t * @example\n\t * var myArray = [5, 9, 2, 4];\n\t *\n\t * array.sorted( myArray );\n\t * myArray[0]; // 2\n\t */\n\tsorted: function ( obj ) {\n\t\treturn obj.sort( array.sort );\n\t},\n\n\t/**\n\t * Splits an Array by divisor\n\t *\n\t * @method split\n\t * @memberOf array\n\t * @param  {Array}  obj     Array to process\n\t * @param  {Number} divisor Integer to divide the Array by\n\t * @return {Array}          Split Array\n\t * @example\n\t * var myArray = [],\n\t *     i       = -1,\n\t *     results;\n\t *\n\t * while ( ++i < 100 ) {\n\t *   myarray.push( i + 1 );\n\t * }\n\t *\n\t * results = array.split( myArray, 21 );\n\t * results.length;     // 21\n\t * results[0].length;  // 5\n\t * results[19].length; // 4\n\t * results[19][0];     // 99\n\t * results[20].length; // 1\n\t * results[20][0];     // 100\n\t */\n\tsplit: function ( obj, divisor ) {\n\t\tvar result = [],\n\t\t\ttotal = obj.length,\n\t\t\tnth = Math.ceil( total / divisor ),\n\t\t\tlow = Math.floor( total / divisor ),\n\t\t\tlower = Math.ceil( total / nth ),\n\t\t\tlowered = false,\n\t\t\tstart = 0,\n\t\t\ti = -1;\n\n\t\t// Finding the fold\n\t\tif ( number.diff( total, ( divisor * nth ) ) > nth ) {\n\t\t\tlower = total - ( low * divisor ) + low - 1;\n\t\t}\n\t\telse if ( total % divisor > 0 && lower * nth >= total ) {\n\t\t\tlower--;\n\t\t}\n\n\t\twhile ( ++i < divisor ) {\n\t\t\tif ( i > 0 ) {\n\t\t\t\tstart = start + nth;\n\t\t\t}\n\n\t\t\tif ( !lowered && lower < divisor && i === lower ) {\n\t\t\t\t--nth;\n\t\t\t\tlowered = true;\n\t\t\t}\n\n\t\t\tresult.push( array.limit( obj, start, nth ) );\n\t\t}\n\n\t\treturn result;\n\t},\n\n\t/**\n\t * Finds the standard deviation of an Array\n\t *\n\t * @method stddev\n\t * @memberOf array\n\t * @param  {Array} obj Array to process\n\t * @return {Number}    Standard deviation of the Array ( float or integer )\n\t * @example\n\t * array.stddev( [1, 3, 5] ); // 1.632993161855452\n\t */\n\tstddev: function ( obj ) {\n\t\treturn Math.sqrt( array.variance( obj ) );\n\t},\n\n\t/**\n\t * Gets the summation of an Array\n\t *\n\t * @method sum\n\t * @memberOf array\n\t * @param  {Array} obj Array to sum\n\t * @return {Number}    Summation of Array\n\t * @example\n\t * array.sum( [2, 4, 3, 1] ); // 10\n\t */\n\tsum: function ( obj ) {\n\t\tvar result = 0;\n\n\t\tif ( obj.length > 0 ) {\n\t\t\tresult = obj.reduce( function ( prev, cur ) {\n\t\t\t\treturn prev + cur;\n\t\t\t} );\n\t\t}\n\n\t\treturn result;\n\t},\n\n\t/**\n\t * Takes the first `n` indices from `obj`\n\t *\n\t * @method take\n\t * @memberOf array\n\t * @param  {Array}  obj Array to process\n\t * @param  {Number} n   Offset from 0 to return\n\t * @return {Array}      Subset of `obj`\n\t * @example\n\t * array.take( [1, 2, 3, 4], 2 ); // [1, 2]\n\t */\n\ttake: function ( obj, n ) {\n\t\treturn array.limit( obj, 0, n );\n\t},\n\n\t/**\n\t * Casts an Array to Object\n\t *\n\t * @method toObject\n\t * @memberOf array\n\t * @param  {Array} ar Array to transform\n\t * @return {Object}   New object\n\t * @example\n\t * array.toObject( [\"abc\", \"def\"] ); // {0: \"abc\", 1: \"def\"}\n\t */\n\ttoObject: function ( ar ) {\n\t\tvar obj = {},\n\t\t\ti = ar.length;\n\n\t\twhile ( i-- ) {\n\t\t\tobj[ i.toString() ] = ar[ i ];\n\t\t}\n\n\t\treturn obj;\n\t},\n\n\t/**\n\t * Gets the total keys in an Array\n\t *\n\t * @method total\n\t * @memberOf array\n\t * @param  {Array} obj Array to find the length of\n\t * @return {Number}    Number of keys in Array\n\t * @example\n\t * var myArray = [true, true, false];\n\t *\n\t * myarray.extra = true;\n\t * array.total( myArray ); // 4\n\t */\n\ttotal: function ( obj ) {\n\t\treturn array.indexed( obj ).length;\n\t},\n\n\t/**\n\t * Returns an Array of unique indices of `obj`\n\t *\n\t * @method unique\n\t * @memberOf array\n\t * @param  {Array} obj Array to process\n\t * @return {Array}     Array of unique indices\n\t * @example\n\t * array.unique( [\"a\", \"b\", \"a\", \"c\", \"b\", \"d\"] ); // [\"a\", \"b\", \"c\", \"d\"]\n\t */\n\tunique: function ( obj ) {\n\t\tvar result = [];\n\n\t\tarray.iterate( obj, function ( i ) {\n\t\t\tarray.add( result, i );\n\t\t} );\n\n\t\treturn result;\n\t},\n\n\t/**\n\t * Finds the variance of an Array ( of numbers )\n\t *\n\t * @method variance\n\t * @memberOf array\n\t * @param  {Array} obj Array to process\n\t * @return {Number}    Variance of the Array ( float or integer )\n\t * @example\n\t * array.variance( [1, 3, 5] ); // 2.6666666666666665\n\t */\n\tvariance: function ( obj ) {\n\t\tvar nth = obj.length,\n\t\t\tn = 0,\n\t\t\tmean;\n\n\t\tif ( nth > 0 ) {\n\t\t\tmean = array.mean( obj );\n\n\t\t\tarray.iterate( obj, function ( i ) {\n\t\t\t\tn += math.sqr( i - mean );\n\t\t\t} );\n\n\t\t\treturn n / nth;\n\t\t}\n\t\telse {\n\t\t\treturn n;\n\t\t}\n\t},\n\n\t/**\n\t * Library version\n\t *\n\t * @type {String}\n\t */\n\tversion: \"1.1.0\",\n\n\t/**\n\t * Converts any arguments to Arrays, then merges elements of `obj` with corresponding elements from each argument\n\t *\n\t * @method zip\n\t * @memberOf array\n\t * @param  {Array} obj  Array to transform\n\t * @param  {Mixed} args Argument instance or Array to merge\n\t * @return {Array}      Array\n\t * @example\n\t * array.zip( [0, 1], 1 ); // [[0, 1], [1, null]]\n\t */\n\tzip: function ( obj, args ) {\n\t\tvar result = [];\n\n\t\t// Preparing args\n\t\tif ( !( args instanceof Array ) ) {\n\t\t\targs = typeof args == \"object\" ? array.cast( args ) : [ args ];\n\t\t}\n\n\t\tarray.iterate( args, function ( i, idx ) {\n\t\t\tif ( !( i instanceof Array ) ) {\n\t\t\t\targs[ idx ] = [ i ];\n\t\t\t}\n\t\t} );\n\n\t\t// Building result Array\n\t\tarray.iterate( obj, function ( i, idx ) {\n\t\t\tresult[ idx ] = [ i ];\n\t\t\tarray.iterate( args, function ( x ) {\n\t\t\t\tresult[ idx ].push( x[ idx ] || null );\n\t\t\t} );\n\t\t} );\n\n\t\treturn result;\n\t}\n};\n\n/**\n * @namespace json\n * @private\n */\nvar json = {\n\t/**\n\t * Decodes the argument\n\t *\n\t * @method decode\n\t * @memberOf json\n\t * @param  {String}  arg    String to parse\n\t * @param  {Boolean} silent [Optional] Silently fail\n\t * @return {Mixed}          Entity resulting from parsing JSON, or undefined\n\t * @example\n\t * var x = json.decode( ..., true );\n\t *\n\t * if ( x ) {\n\t *   ...\n\t * }\n\t * else {\n\t *   ... // invalid JSON, with `Error` suppressed by `silent`\n\t * }\n\t */\n\tdecode: function ( arg, silent ) {\n\t\ttry {\n\t\t\treturn JSON.parse( arg );\n\t\t}\n\t\tcatch ( e ) {\n\t\t\tif ( silent !== true ) {\n\t\t\t\tutility.error( e, arguments, this );\n\t\t\t}\n\n\t\t\treturn undefined;\n\t\t}\n\t},\n\n\t/**\n\t * Encodes `arg` as JSON\n\t *\n\t * @method encode\n\t * @memberOf json\n\t * @param  {Mixed}   arg    Primative\n\t * @param  {Boolean} silent [Optional] Silently fail\n\t * @return {String}         JSON, or undefined\n\t * @example\n\t * var x = json.encode( ..., true );\n\t *\n\t * if ( x ) {\n\t *   ...\n\t * }\n\t * else {\n\t *   ... // invalid JSON, with `Error` suppressed by `silent`\n\t * }\n\t */\n\tencode: function ( arg, silent ) {\n\t\ttry {\n\t\t\treturn JSON.stringify( arg );\n\t\t}\n\t\tcatch ( e ) {\n\t\t\tif ( silent !== true ) {\n\t\t\t\tutility.error( e, arguments, this );\n\t\t\t}\n\n\t\t\treturn undefined;\n\t\t}\n\t}\n};\n\n/**\n * @namespace label\n * @private\n */\nvar label = {\n\t/**\n\t * Expected a Number\n\t *\n\t * @type {String}\n\t * @memberOf label\n\t */\n\texpectedNumber: \"Expected a Number\",\n\n\t/**\n\t * One or more arguments is invalid\n\t *\n\t * @type {String}\n\t * @memberOf label\n\t */\n\tinvalidArguments: \"One or more arguments is invalid\"\n};\n\n/**\n * @namespace math\n * @private\n */\nvar math = {\n\t/**\n\t * Squares a Number\n\t *\n\t * @method sqr\n\t * @memberOf math\n\t * @param  {Number} n Number to square\n\t * @return {Number}   Squared value\n\t * @example\n\t * var sqr = math.sqr( 23 );\n\t */\n\tsqr: function ( n ) {\n\t\treturn Math.pow( n, 2 );\n\t}\n};\n\n/**\n * @namespace number\n * @private\n */\nvar number = {\n\t/**\n\t * Returns the difference of arg\n\t *\n\t * @method diff\n\t * @memberOf number\n\t * @param {Number} arg Number to compare\n\t * @return {Number}    The absolute difference\n\t * @example\n\t * number.diff( -3, 8 ); // 11\n\t */\n\tdiff: function ( num1, num2 ) {\n\t\tif ( isNaN( num1 ) || isNaN( num2 ) ) {\n\t\t\tthrow new Error( label.expectedNumber );\n\t\t}\n\n\t\treturn Math.abs( num1 - num2 );\n\t},\n\n\t/**\n\t * Tests if an number is even\n\t *\n\t * @method even\n\t * @memberOf number\n\t * @param {Number} arg Number to test\n\t * @return {Boolean}   True if even, or undefined\n\t * @example\n\t * var n = 234235;\n\t *\n\t * if ( number.even( n ) ) {\n\t *   ...\n\t * }\n\t */\n\teven: function ( arg ) {\n\t\treturn arg % 2 === 0;\n\t},\n\n\t/**\n\t * Tests if a number is odd\n\t *\n\t * @method odd\n\t * @memberOf number\n\t * @param  {Number} arg Number to test\n\t * @return {Boolean}    True if odd, or undefined\n\t * @example\n\t * var n = 234235;\n\t *\n\t * if ( number.odd( n ) ) {\n\t *   ...\n\t * }\n\t */\n\todd: function ( arg ) {\n\t\treturn !number.even( arg );\n\t},\n\n\t/**\n\t * Parses the number\n\t *\n\t * @method parse\n\t * @memberOf number\n\t * @param  {Mixed}  arg  Number to parse\n\t * @param  {Number} base Integer representing the base or radix\n\t * @return {Number}      Integer or float\n\t * @example\n\t * // Unsure if `n` is an int or a float\n\t * number.parse( n );\n\t */\n\tparse: function ( arg, base ) {\n\t\treturn ( base === undefined ) ? parseFloat( arg ) : parseInt( arg, base );\n\t},\n\n\t/**\n\t * Rounds a number up or down\n\t *\n\t * @method round\n\t * @memberOf number\n\t * @param  {Number} arg       Number to round\n\t * @param  {String} direction [Optional] \"up\" or \"down\"\n\t * @return {Number}           Rounded interger\n\t * @example\n\t * math.round( n, \"down\" );\n\t */\n\tround: function ( arg, direction ) {\n\t\targ = number.parse( arg );\n\n\t\tif ( direction === undefined || string.isEmpty( direction ) ) {\n\t\t\treturn number.parse( arg.toFixed( 0 ) );\n\t\t}\n\t\telse if ( regex.down.test( direction ) ) {\n\t\t\treturn ~~( arg );\n\t\t}\n\t\telse {\n\t\t\treturn Math.ceil( arg );\n\t\t}\n\t}\n};\n\n/**\n * Regex patterns used through retsu\n *\n * `url` was authored by Diego Perini\n *\n * @namespace regex\n * @private\n */\nvar regex = {\n\tbool: /^(true|false)?$/,\n\tdown: /down/,\n\tnot_dotnotation: /-|\\s/,\n\tnull_undefined: /null|undefined/,\n\tprimitive: /^(boolean|function|number|string)$/,\n\tspace_hyphen: /\\s|-/,\n\turl: /^(?:(?:https?|ftp):\\/\\/)(?:\\S+(?::\\S*)?@)?(?:(?!10(?:\\.\\d{1,3}){3})(?!127(?:\\.\\d{1,3}){3})(?!169\\.254(?:\\.\\d{1,3}){2})(?!192\\.168(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]+-?)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]+-?)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,})))(?::\\d{2,5})?(?:\\/[^\\s]*)?$/i\n};\n\n/**\n * @namespace string\n * @private\n */\nvar string = {\n\t/**\n\t * Splits a string on comma, or a parameter, and trims each value in the resulting Array\n\t *\n\t * @method explode\n\t * @memberOf string\n\t * @param  {String} obj String to capitalize\n\t * @param  {String} arg String to split on\n\t * @return {Array}      Array of the exploded String\n\t * @example\n\t * array.iterate( string.explode( \"abc, def\" ), function ( i ) {\n\t *   ...\n\t * } );\n\t */\n\texplode: function ( obj, arg ) {\n\t\targ = arg || \",\";\n\n\t\treturn string.trim( obj ).split( new RegExp( \"\\\\s*\" + arg + \"\\\\s*\" ) );\n\t},\n\n\t/**\n\t * Tests if a string is empty\n\t *\n\t * @method isEmpty\n\t * @memberOf string\n\t * @param  {String}  obj String to test\n\t * @return {Boolean}     Result of test\n\t * @example\n\t * if ( !string.isEmpty( ... ) {\n\t *   ...\n\t * } );\n\t */\n\tisEmpty: function ( obj ) {\n\t\treturn string.trim( obj ) === \"\";\n\t},\n\n\t/**\n\t * Trims the whitespace around a String\n\t *\n\t * @method trim\n\t * @memberOf string\n\t * @param  {String} obj String to capitalize\n\t * @return {String}     Trimmed String\n\t * @example\n\t * string.trim( \"  hello world \" ); // \"hello world\"\n\t */\n\ttrim: function ( obj ) {\n\t\treturn obj.replace( /^(\\s+|\\t+|\\n+)|(\\s+|\\t+|\\n+)$/g, \"\" );\n\t}\n};\n\n/**\n * @namespace utility\n * @private\n */\nvar utility = {\n\t/**\n\t * Collection of timers\n\t *\n\t * @memberOf utility\n\t * @type {Object}\n\t */\n\ttimer: {},\n\n\t/**\n\t * Collection of repeating functions\n\t *\n\t * @memberOf utility\n\t * @type {Object}\n\t */\n\trepeating: {},\n\n\t/**\n\t * Clears deferred & repeating functions\n\t *\n\t * @method clearTimers\n\t * @memberOf utility\n\t * @param  {String} id ID of timer( s )\n\t * @return {Undefined} undefined\n\t */\n\tclearTimers: function ( id ) {\n\t\tif ( id === undefined || string.isEmpty( id ) ) {\n\t\t\tthrow new Error( label.invalidArguments );\n\t\t}\n\n\t\t// deferred\n\t\tif ( utility.timer[ id ] ) {\n\t\t\tclearTimeout( utility.timer[ id ] );\n\t\t\tdelete utility.timer[ id ];\n\t\t}\n\n\t\t// repeating\n\t\tif ( utility.repeating[ id ] ) {\n\t\t\tclearTimeout( utility.repeating[ id ] );\n\t\t\tdelete utility.repeating[ id ];\n\t\t}\n\t},\n\n\t/**\n\t * Clones an Object\n\t *\n\t * @method clone\n\t * @memberOf utility\n\t * @param  {Object}  obj     Object to clone\n\t * @param  {Boolean} shallow [Optional] Create a shallow clone, which doesn't maintain prototypes, default is `false`\n\t * @return {Object}          Clone of obj\n\t * @example\n\t * var x = {a: true, b: false},\n\t *     y = utility.clone( x, true );\n\t *\n\t * y.a; // true\n\t */\n\tclone: function ( obj, shallow ) {\n\t\tvar clone, result;\n\n\t\tif ( shallow === true ) {\n\t\t\treturn obj !== undefined && obj !== null ? json.decode( json.encode( obj ) ) : obj;\n\t\t}\n\t\telse if ( !obj || regex.primitive.test( typeof obj ) || ( obj instanceof RegExp ) ) {\n\t\t\treturn obj;\n\t\t}\n\t\telse if ( obj instanceof Array ) {\n\t\t\tresult = [];\n\n\t\t\tarray.iterate( obj, function ( i, idx ) {\n\t\t\t\tresult[ idx ] = utility.clone( i );\n\t\t\t} );\n\n\t\t\treturn result;\n\t\t}\n\t\telse if ( !server && obj instanceof Document ) {\n\t\t\treturn xml.decode( xml.encode( obj ) );\n\t\t}\n\t\telse if ( typeof obj.__proto__ != \"undefined\" ) {\n\t\t\treturn utility.extend( obj.__proto__, obj );\n\t\t}\n\t\telse if ( obj instanceof Object ) {\n\t\t\t// If JSON encoding fails due to recursion, the original Object is returned because it's assumed this is for decoration\n\t\t\tclone = json.encode( obj, true );\n\n\t\t\tif ( clone !== undefined ) {\n\t\t\t\tclone = json.decode( clone );\n\n\t\t\t\t// Decorating Functions that would be lost with JSON encoding/decoding\n\t\t\t\tutility.iterate( obj, function ( v, k ) {\n\t\t\t\t\tif ( typeof v == \"function\" ) {\n\t\t\t\t\t\tclone[ k ] = v;\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t}\n\t\t\telse {\n\t\t\t\tclone = obj;\n\t\t\t}\n\n\t\t\treturn clone;\n\t\t}\n\t\telse {\n\t\t\treturn obj;\n\t\t}\n\t},\n\n\t/**\n\t * Defers the execution of Function by at least the supplied milliseconds.\n\t * Timing may vary under \"heavy load\" relative to the CPU & client JavaScript engine.\n\t *\n\t * @method defer\n\t * @memberOf utility\n\t * @param  {Function} fn     Function to defer execution of\n\t * @param  {Number}   ms     Milliseconds to defer execution\n\t * @param  {Number}   id     [Optional] ID of the deferred function\n\t * @param  {Boolean}  repeat [Optional] Describes the execution, default is `false`\n\t * @return {String}          ID of the timer\n\t */\n\tdefer: function ( fn, ms, id, repeat ) {\n\t\tvar op;\n\n\t\tms = ms || 0;\n\t\trepeat = ( repeat === true );\n\n\t\tif ( id !== undefined ) {\n\t\t\tutility.clearTimers( id );\n\t\t}\n\t\telse {\n\t\t\tid = utility.uuid( true );\n\t\t}\n\n\t\top = function () {\n\t\t\tutility.clearTimers( id );\n\t\t\tfn();\n\t\t};\n\n\t\tutility[ repeat ? \"repeating\" : \"timer\" ][ id ] = setTimeout( op, ms );\n\n\t\treturn id;\n\t},\n\n\t/**\n\t * Error handling, with history in `error.log`\n\t *\n\t * @method error\n\t * @memberOf utility\n\t * @param  {Mixed}   e       Error object or message to display\n\t * @param  {Array}   args    Array of arguments from the callstack\n\t * @param  {Mixed}   scope   Entity that was \"this\"\n\t * @param  {Boolean} warning [Optional] Will display as console warning if true\n\t * @return {Undefined}       undefined\n\t */\n\terror: function ( e, args, scope, warning ) {\n\t\tvar o = {\n\t\t\t\"arguments\": args ? array.cast( args ) : [],\n\t\t\tmessage: e.message || e,\n\t\t\tnumber: e.number ? ( e.number & 0xFFFF ) : undefined,\n\t\t\tscope: scope,\n\t\t\tstack: e.stack || undefined,\n\t\t\ttimestamp: new Date().toUTCString(),\n\t\t\ttype: e.type || \"TypeError\"\n\t\t};\n\n\t\tutility.log( o.stack || o.message, warning !== true ? \"error\" : \"warn\" );\n\n\t\treturn undefined;\n\t},\n\n\t/**\n\t * Creates a \"class\" extending Object, with optional decoration\n\t *\n\t * @method extend\n\t * @memberOf utility\n\t * @param  {Object} obj Object to extend\n\t * @param  {Object} arg [Optional] Object for decoration\n\t * @return {Object}     Decorated obj\n\t * @example\n\t * var extendObj = utility.extend( someObj, {newProperty: value} );\n\t */\n\textend: function ( obj, arg ) {\n\t\tvar o;\n\n\t\tif ( obj === undefined ) {\n\t\t\tthrow new Error( label.invalidArguments );\n\t\t}\n\n\t\to = Object.create( obj );\n\n\t\tif ( arg instanceof Object ) {\n\t\t\tutility.merge( o, arg );\n\t\t}\n\n\t\treturn o;\n\t},\n\n\t/**\n\t * Iterates an Object and executes a function against the properties.\n\t * Returning `false` halts iteration.\n\t *\n\t * @method iterate\n\t * @memberOf utility\n\t * @param  {Object}   obj Object to iterate\n\t * @param  {Function} fn  Function to execute against properties\n\t * @return {Object}       Object\n\t * @example\n\t * utility.iterate( {...}, function ( value, key ) {\n\t *   ...\n\t * } );\n\t */\n\titerate: function ( obj, fn ) {\n\t\tarray.iterate( Object.keys( obj ), function ( i ) {\n\t\t\treturn fn.call( obj, obj[ i ], i );\n\t\t} );\n\n\t\treturn obj;\n\t},\n\n\t/**\n\t * Writes argument to the console\n\t *\n\t * @method log\n\t * @memberOf utility\n\t * @param  {String} arg    String to write to the console\n\t * @param  {String} target [Optional] Target console, default is \"log\"\n\t * @return {Undefined}     undefined\n\t * @example\n\t * utility.log( \"Something bad happened\", \"warn\" );\n\t */\n\tlog: function ( arg, target ) {\n\t\tvar ts, msg;\n\n\t\tif ( typeof console != \"undefined\" ) {\n\t\t\tts = typeof arg != \"object\";\n\t\t\tmsg = ts ? \"[\" + new Date().toLocaleTimeString() + \"] \" + arg : arg;\n\t\t\tconsole[ target || \"log\" ]( msg );\n\t\t}\n\t},\n\n\t/**\n\t * Merges obj with arg\n\t *\n\t * @method merge\n\t * @memberOf utility\n\t * @param  {Object} obj Object to decorate\n\t * @param  {Object} arg Decoration\n\t * @return {Object}     Decorated Object\n\t * @example\n\t * var obj = {a: true};\n\t *\n\t * util.merge( obj, {b: false} )\n\t * obj.b; // false\n\t */\n\tmerge: function ( obj, arg ) {\n\t\tutility.iterate( arg, function ( v, k ) {\n\t\t\tif ( ( obj[ k ] instanceof Array ) && ( v instanceof Array ) ) {\n\t\t\t\tarray.merge( obj[ k ], v );\n\t\t\t}\n\t\t\telse if ( ( obj[ k ] instanceof Object ) && ( v instanceof Object ) ) {\n\t\t\t\tutility.iterate( v, function ( x, y ) {\n\t\t\t\t\tobj[ k ][ y ] = utility.clone( x );\n\t\t\t\t} );\n\t\t\t}\n\t\t\telse {\n\t\t\t\tobj[ k ] = utility.clone( v );\n\t\t\t}\n\t\t} );\n\n\t\treturn obj;\n\t},\n\n\t/**\n\t * Creates a recursive function. Return false from the function to halt recursion.\n\t *\n\t * @method repeat\n\t * @memberOf utility\n\t * @param  {Function} fn  Function to execute repeatedly\n\t * @param  {Number}   ms  Milliseconds to stagger the execution\n\t * @param  {String}   id  [Optional] Timeout ID\n\t * @param  {Boolean}  now Executes `fn` and then setup repetition, default is `true`\n\t * @return {String}       Timeout ID\n\t * @example\n\t * utility.repeat( function () {\n\t *   ...\n\t *\n\t *   // Cancelling repetition at some point in the future\n\t *   if ( someCondition ) {\n\t *     return false;\n\t *   }\n\t * }, 1000, \"repeating\" );\n\t */\n\trepeat: function ( fn, ms, id, now ) {\n\t\tms = ms || 10;\n\t\tid = id || utility.uuid( true );\n\t\tnow = ( now !== false );\n\n\t\t// Could be valid to return false from initial execution\n\t\tif ( now && fn() === false ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Creating repeating execution\n\t\tutility.defer( function () {\n\t\t\tvar recursive = function ( fn, ms, id ) {\n\t\t\t\tvar recursive = this;\n\n\t\t\t\tif ( fn() !== false ) {\n\t\t\t\t\tutility.repeating[ id ] = setTimeout( function () {\n\t\t\t\t\t\trecursive.call( recursive, fn, ms, id );\n\t\t\t\t\t}, ms );\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tdelete utility.repeating[ id ];\n\t\t\t\t}\n\t\t\t};\n\n\t\t\trecursive.call( recursive, fn, ms, id );\n\t\t}, ms, id, true );\n\n\t\treturn id;\n\t},\n\n\t/**\n\t * Generates a version 4 UUID\n\t *\n\t * @method uuid\n\t * @memberOf utility\n\t * @param  {Boolean} strip [Optional] Strips - from UUID\n\t * @return {String}        UUID\n\t * @example\n\t * var uuid4 = utility.uuid();\n\t */\n\tuuid: function ( strip ) {\n\t\tvar s = function () {\n\t\t\t\treturn ( ( ( 1 + Math.random() ) * 0x10000 ) | 0 ).toString( 16 ).substring( 1 );\n\t\t\t},\n\t\t\tr = [ 8, 9, \"a\", \"b\" ],\n\t\t\to;\n\n\t\to = ( s() + s() + \"-\" + s() + \"-4\" + s().substr( 0, 3 ) + \"-\" + r[ Math.floor( Math.random() * 4 ) ] + s().substr( 0, 3 ) + \"-\" + s() + s() + s() );\n\n\t\tif ( strip === true ) {\n\t\t\to = o.replace( /-/g, \"\" );\n\t\t}\n\n\t\treturn o;\n\t}\n};\n\n/**\n * @namespace xml\n * @private\n */\nvar xml = {\n\t/**\n\t * Returns XML (Document) Object from a String\n\t *\n\t * @method decode\n\t * @memberOf xml\n\t * @param  {String} arg XML String\n\t * @return {Object}     XML Object or undefined\n\t */\n\tdecode: function ( arg ) {\n\t\tif ( typeof arg != \"string\" || string.isEmpty( arg ) ) {\n\t\t\tthrow new Error( label.invalidArguments );\n\t\t}\n\n\t\treturn new DOMParser().parseFromString( arg, \"text/xml\" );\n\t},\n\n\t/**\n\t * Returns XML String from an Object or Array\n\t *\n\t * @method encode\n\t * @memberOf xml\n\t * @param  {Mixed} arg Object or Array to cast to XML String\n\t * @return {String}    XML String or undefined\n\t */\n\tencode: function ( arg, wrap ) {\n\t\ttry {\n\t\t\tif ( arg === undefined ) {\n\t\t\t\tthrow new Error( label.invalidArguments );\n\t\t\t}\n\n\t\t\twrap = ( wrap !== false );\n\t\t\tvar x = wrap ? \"<xml>\" : \"\",\n\t\t\t\ttop = ( arguments[ 2 ] !== false ),\n\t\t\t\tnode;\n\n\t\t\t/**\n\t\t\t * Encodes a value as a node\n\t\t\t *\n\t\t\t * @method node\n\t\t\t * @memberOf xml.encode\n\t\t\t * @private\n\t\t\t * @param  {String} name  Node name\n\t\t\t * @param  {String} value Node value\n\t\t\t * @return {String}       Node\n\t\t\t */\n\t\t\tnode = function ( name, value ) {\n\t\t\t\tvar output = \"<n>v</n>\";\n\n\t\t\t\toutput = output.replace( \"v\", ( regex.cdata.test( value ) ? \"<![CDATA[\" + value + \"]]>\" : value ) );\n\t\t\t\treturn output.replace( /<(\\/)?n>/g, \"<$1\" + name + \">\" );\n\t\t\t};\n\n\t\t\tif ( arg !== null && arg.xml ) {\n\t\t\t\targ = arg.xml;\n\t\t\t}\n\n\t\t\tif ( arg instanceof Document ) {\n\t\t\t\targ = ( new XMLSerializer() ).serializeToString( arg );\n\t\t\t}\n\n\t\t\tif ( regex.boolean_number_string.test( typeof arg ) ) {\n\t\t\t\tx += node( \"item\", arg );\n\t\t\t}\n\t\t\telse if ( typeof arg == \"object\" ) {\n\t\t\t\tutility.iterate( arg, function ( v, k ) {\n\t\t\t\t\tx += xml.encode( v, ( typeof v == \"object\" ), false ).replace( /item|xml/g, isNaN( k ) ? k : \"item\" );\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\tx += wrap ? \"</xml>\" : \"\";\n\n\t\t\tif ( top ) {\n\t\t\t\tx = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF8\\\"?>\" + x;\n\t\t\t}\n\n\t\t\treturn x;\n\t\t}\n\t\tcatch ( e ) {\n\t\t\tutility.error( e, arguments, this );\n\n\t\t\treturn undefined;\n\t\t}\n\t},\n\n\t/**\n\t * Validates `arg` is XML\n\t *\n\t * @method valid\n\t * @memberOf xml\n\t * @param  {String} arg String to validate\n\t * @return {Boolean}    `true` if valid XML\n\t */\n\tvalid: function ( arg ) {\n\t\treturn ( xml.decode( arg ).getElementsByTagName( \"parsererror\" ).length === 0 );\n\t}\n};\n\n// Node, AMD & window supported\nif ( typeof exports != \"undefined\" ) {\n\tmodule.exports = array;\n}\nelse if ( typeof define == \"function\" ) {\n\tdefine( function () {\n\t\treturn array;\n\t} );\n}\nelse {\n\tglobal.retsu = array;\n}\n} )( this );\n"]}