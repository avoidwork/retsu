{"version":3,"file":"retsu.min.js","sources":["retsu.js"],"names":["global","array","add","obj","arg","contains","push","binIndex","max","length","min","idx","val","result","Math","floor","cast","key","arguments","undefined","Object","keys","isNaN","map","i","Array","from","chunk","size","nth","ceil","start","limit","clear","remove","clone","JSON","parse","stringify","indexOf","collect","fn","compact","diff","filter","count","value","a","b","concat","each","ctx","call","eachAsync","repeat","offset","lobj","setTimeout","eachReverse","eachReverseAsync","reverse","equal","fill","l","first","flat","reduce","forEach","fromObject","mingle","index","indexed","intersect","obj1","obj2","isEmpty","iterate","itr","iterator","item","next","done","keepIf","last","n","larg","range","sorted","mean","sum","median","mid","merge","mode","values","k","v","Number","rassoc","reject","end","remaining","slice","apply","removeIf","removeWhile","replace","rest","rindex","rotate","series","lstart","sort","types","c","d","toString","split","divisor","total","low","lower","lowered","abs","stddev","sqrt","variance","take","toObject","ar","unique","pow","version","zip","args","x","exports","module","define","retsu","window"],"mappings":"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","sourcesContent":["/**\n * Array micro library focused on speed\n *\n * @copyright 2015 Jason Mulligan <jason.mulligan@avoidwork.com>\n * @license BSD-3-Clause\n * @link http://avoidwork.github.io/retsu\n * @module retsu\n * @version 2.0.0\n */\n\"use strict\";\n\n(function (global) {\n\n\t/**\n  * @namespace array\n  */\n\tvar array = {\n\t\t/**\n   * Adds 'arg' to 'obj' if it is not found\n   *\n   * @method add\n   * @memberOf array\n   * @param  {Array} obj Array to receive 'arg'\n   * @param  {Mixed} arg Argument to set in 'obj'\n   * @return {Array}     Array that was queried\n   * @example\n   * let myArray = [1, 2];\n   *\n   * array.add(myArray, 3); // [1, 2, 3]\n   * array.add(myArray, 1); // [1, 2, 3]\n   */\n\t\tadd: function add(obj, arg) {\n\t\t\tif (!array.contains(obj, arg)) {\n\t\t\t\tobj.push(arg);\n\t\t\t}\n\n\t\t\treturn obj;\n\t\t},\n\n\t\t/**\n   * Preforms a binary search on a sorted Array\n   *\n   * @method binIndex\n   * @memberOf array\n   * @param  {Array} obj Array to search\n   * @param  {Mixed} arg Value to find index of\n   * @return {Number}    Index of `arg` within `obj`\n   * @example\n   * let myArray = [1, 5, 10, 15, 20, 25, ...];\n   *\n   * array.binIndex(myArray, 5); // 1\n   */\n\t\tbinIndex: function binIndex(obj, arg) {\n\t\t\tvar max = obj.length - 1,\n\t\t\t    min = 0,\n\t\t\t    idx = 0,\n\t\t\t    val = 0,\n\t\t\t    result = -1;\n\n\t\t\twhile (min <= max) {\n\t\t\t\tidx = Math.floor((min + max) / 2);\n\t\t\t\tval = obj[idx];\n\n\t\t\t\tif (val < arg) {\n\t\t\t\t\tmin = idx + 1;\n\t\t\t\t} else if (val > arg) {\n\t\t\t\t\tmax = idx - 1;\n\t\t\t\t} else {\n\t\t\t\t\tresult = idx;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn result;\n\t\t},\n\n\t\t/**\n   * Returns an Object (NodeList, etc.) as an Array\n   *\n   * @method cast\n   * @memberOf array\n   * @param  {Object}  obj Object to cast\n   * @param  {Boolean} key [Optional] Returns key or value, only applies to Objects without a length property\n   * @return {Array}       Object as an Array\n   * @example\n   * array.cast(document.querySelectorAll(\"...\"));\n   */\n\t\tcast: function cast(obj) {\n\t\t\tvar key = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];\n\n\t\t\tvar result = undefined;\n\n\t\t\tif (key === true) {\n\t\t\t\tresult = Object.keys(obj);\n\t\t\t} else if (!isNaN(obj.length)) {\n\t\t\t\tresult = Array.from(obj);\n\t\t\t} else {\n\t\t\t\tresult = Object.keys(obj).map(function (i) {\n\t\t\t\t\treturn obj[i];\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn result;\n\t\t},\n\n\t\t/**\n   * Transforms an Array to a 2D Array of chunks\n   *\n   * @method chunk\n   * @memberOf array\n   * @param  {Array}  obj  Array to process\n   * @param  {Number} size Chunk size (integer)\n   * @return {Array}       Chunked Array\n   * @example\n   * array.chunk([0, 1, 2, 3], 2); // [[0, 1], [2, 3]]\n   */\n\t\tchunk: function chunk(obj, size) {\n\t\t\tvar result = [],\n\t\t\t    nth = Math.ceil(obj.length / size),\n\t\t\t    start = 0,\n\t\t\t    i = -1;\n\n\t\t\twhile (++i < nth) {\n\t\t\t\tstart = i * size;\n\t\t\t\tresult.push(array.limit(obj, start, size));\n\t\t\t}\n\n\t\t\treturn result;\n\t\t},\n\n\t\t/**\n   * Clears an Array without destroying it\n   *\n   * @method clear\n   * @memberOf array\n   * @param  {Array} obj Array to clear\n   * @return {Array}     Cleared Array\n   * @example\n   * let myArray = [1, 2, 3, 4, 5];\n   *\n   * array.clear(myArray);\n   * myArray.length; // 0\n   */\n\t\tclear: function clear(obj) {\n\t\t\treturn array.remove(obj, 0, obj.length);\n\t\t},\n\n\t\t/**\n   * Shallow clones an Array\n   *\n   * @method clone\n   * @memberOf array\n   * @param  {Array} obj Array to clone\n   * @return {Array}     Clone of Array\n   * @example\n   * let myArray      = [1, 2, 3, 4, 5],\n   *     myArrayClone = array.clone(myArray);\n   *\n   * myArrayClone.push(6);\n   *\n   * myArray.length;      // 5\n   * myArrayClone.length; // 6\n   */\n\t\tclone: function clone(obj) {\n\t\t\treturn JSON.parse(JSON.stringify(obj));\n\t\t},\n\n\t\t/**\n   * Determines if obj contains arg\n   *\n   * @method contains\n   * @memberOf array\n   * @param  {Array} obj Array to search\n   * @param  {Mixed} arg Value to look for\n   * @return {Boolean}   True if found, false if not\n   * @example\n   * if (array.contains([1], 1)) { ... }\n   */\n\t\tcontains: function contains(obj, arg) {\n\t\t\treturn obj.indexOf(arg) > -1;\n\t\t},\n\n\t\t/**\n   * Facade of `Array.map()`\n   *\n   * @method collect\n   * @memberOf array\n   * @param  {Array}    obj Array to iterate\n   * @param  {Function} fn  Function to execute against indices\n   * @return {Array}        New Array\n   * @example\n   * let results = array.collect([...], function (...) { ... });\n   */\n\t\tcollect: function collect(obj, fn) {\n\t\t\treturn obj.map(fn);\n\t\t},\n\n\t\t/**\n   * Compacts a Array by removing `null` or `undefined` indices\n   *\n   * @method compact\n   * @memberOf array\n   * @param  {Array}   obj  Array to compact\n   * @param  {Boolean} diff Indicates to return resulting Array only if there's a difference\n   * @return {Array}        Compacted copy of `obj`, or null (if `diff` is passed & no diff is found)\n   * @example\n   * array.compact([null, \"a\", \"b\", \"c\", null, \"d\"]); // [\"a\", \"b\", \"c\", \"d\"]\n   * array.compact([\"a\", \"b\", \"c\", \"d\"], true);       // null\n   */\n\t\tcompact: function compact(obj) {\n\t\t\tvar diff = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];\n\n\t\t\tvar result = obj.filter(function (i) {\n\t\t\t\treturn i !== null && i !== undefined;\n\t\t\t});\n\n\t\t\treturn diff !== true ? result : result.length < obj.length ? result : null;\n\t\t},\n\n\t\t/**\n   * Counts `value` in `obj`\n   *\n   * @method count\n   * @memberOf array\n   * @param  {Array} obj   Array to search\n   * @param  {Mixed} value Value to compare\n   * @return {Array}       Array of counts\n   * @example\n   * array.count([\"apple\", \"banana\", \"orange\", \"apple\"], \"apple\"); // 2\n   */\n\t\tcount: function count(obj, value) {\n\t\t\treturn obj.filter(function (i) {\n\t\t\t\treturn i === value;\n\t\t\t}).length;\n\t\t},\n\n\t\t/**\n   * Finds the difference between two Arrays\n   *\n   * @method diff\n   * @memberOf array\n   * @param  {Array} obj1 Source Array\n   * @param  {Array} obj2 Comparison Array\n   * @return {Array}      Array of the differences\n   * @example\n   * array.diff([\"a\"], [\"a\", \"b\"]); // [\"b\"]\n   */\n\t\tdiff: function diff(a, b) {\n\t\t\treturn a.filter(function (i) {\n\t\t\t\treturn !array.contains(b, i);\n\t\t\t}).concat(b.filter(function (i) {\n\t\t\t\treturn !array.contains(a, i);\n\t\t\t}));\n\t\t},\n\n\t\t/**\n   * Iterates `obj` and executes `fn` with arguments [`value`, `index`].\n   * Returning `false` halts iteration.\n   *\n   * @method each\n   * @memberOf array\n   * @param  {Array}    obj Array to iterate\n   * @param  {Function} fn  Function to execute on index values\n   * @param  {Mixed}    ctx [Optional] Context for `fn`\n   * @return {Array}        Array\n   * @example\n   * array.each([...], function (...) { ... });\n   * array.each([...], function (...) { ... }, true, 100); // processing batches of a 100\n   */\n\t\teach: function each(obj, fn) {\n\t\t\tvar ctx = arguments.length <= 2 || arguments[2] === undefined ? fn : arguments[2];\n\t\t\treturn (function () {\n\t\t\t\tvar nth = obj.length,\n\t\t\t\t    i = -1;\n\n\t\t\t\twhile (++i < nth) {\n\t\t\t\t\tif (ctx.call(obj, obj[i], i) === false) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn obj;\n\t\t\t})();\n\t\t},\n\n\t\t/**\n   * Iterates `obj` asynchronously and executes `fn` with arguments [`value`, `index`].\n   * Returning `false` halts iteration.\n   *\n   * @method each\n   * @memberOf array\n   * @param  {Array}    obj   Array to iterate\n   * @param  {Function} fn    Function to execute on index values\n   * @param  {Number}   size  Function to execute on index values\n   * @param  {Mixed}    ctx   [Optional] Context for `fn`\n   * @return {Array}          Array\n   * @example\n   * array.eachAsync([...], function (...) { ... });\n   * array.eachAsync([...], function (...) { ... }, true, 100); // processing batches of a 100\n   */\n\t\teachAsync: function eachAsync(obj, fn) {\n\t\t\tvar size = arguments.length <= 2 || arguments[2] === undefined ? 10 : arguments[2];\n\t\t\tvar ctx = arguments.length <= 3 || arguments[3] === undefined ? fn : arguments[3];\n\t\t\treturn (function () {\n\t\t\t\tvar lobj = array.clone(obj),\n\t\t\t\t    nth = lobj.length,\n\t\t\t\t    offset = 0;\n\n\t\t\t\tif (size > nth) {\n\t\t\t\t\tsize = nth;\n\t\t\t\t}\n\n\t\t\t\tfunction repeat() {\n\t\t\t\t\tvar i = -1,\n\t\t\t\t\t    idx = undefined,\n\t\t\t\t\t    result = undefined;\n\n\t\t\t\t\twhile (++i < size) {\n\t\t\t\t\t\tidx = i + offset;\n\n\t\t\t\t\t\tif (idx === nth || ctx.call(lobj, lobj[idx], idx) === false) {\n\t\t\t\t\t\t\tresult = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\toffset += size;\n\n\t\t\t\t\tif (offset >= nth) {\n\t\t\t\t\t\tresult = false;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (result !== false) {\n\t\t\t\t\t\tsetTimeout(repeat, 0);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\trepeat();\n\n\t\t\t\treturn obj;\n\t\t\t})();\n\t\t},\n\n\t\t/**\n   * Iterates `obj` in reverse and executes `fn` with arguments [`value`, `index`].\n   * Returning `false` halts iteration.\n   *\n   * @method eachReverse\n   * @memberOf array\n   * @param  {Array}    obj Array to iterate\n   * @param  {Function} fn  Function to execute on index values\n   * @param  {Boolean}  ctx [Optional] Context to execute `fn`\n   * @return {Array}        Array\n   * @example\n   * array.eachReverse([...], function (...) { ... });\n   * array.eachReverse([...], function (...) { ... }, true, 100); // processing batches of a 100\n   */\n\t\teachReverse: function eachReverse(obj, fn) {\n\t\t\tvar ctx = arguments.length <= 2 || arguments[2] === undefined ? fn : arguments[2];\n\t\t\treturn (function () {\n\t\t\t\tvar i = obj.length;\n\n\t\t\t\twhile (--i > -1) {\n\t\t\t\t\tif (ctx.call(obj, obj[i], i) === false) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn obj;\n\t\t\t})();\n\t\t},\n\n\t\t/**\n   * Iterates `obj` asynchronously in reverse and executes `fn` with arguments [`value`, `index`].\n   * Returning `false` halts iteration.\n   *\n   * @method eachReverse\n   * @memberOf array\n   * @param  {Array}    obj   Array to iterate\n   * @param  {Function} fn    Function to execute on index values\n   * @param  {Number}   size  [Optional] Batch size for async iteration, default is 10\n   * @param  {Boolean}  ctx   [Optional] Context to execute `fn`\n   * @return {Array}          Array\n   * @example\n   * array.eachReverse([...], function (...) { ... });\n   * array.eachReverse([...], function (...) { ... }, true, 100); // processing batches of a 100\n   */\n\t\teachReverseAsync: function eachReverseAsync(obj, fn) {\n\t\t\tvar size = arguments.length <= 2 || arguments[2] === undefined ? 10 : arguments[2];\n\t\t\tvar ctx = arguments.length <= 3 || arguments[3] === undefined ? fn : arguments[3];\n\t\t\treturn (function () {\n\t\t\t\tarray.eachAsync(array.clone(obj).reverse(), fn, size, ctx);\n\n\t\t\t\treturn obj;\n\t\t\t})();\n\t\t},\n\n\t\t/**\n   * Determines if two Arrays are equal\n   *\n   * @method equal\n   * @memberOf array\n   * @param  {Array} a Array to compare\n   * @param  {Array} b Array to compare\n   * @return {Boolean} `true` if the Arrays match\n   * @example\n   * array.equal([\"a\"], [\"a\"]);      // true\n   * array.equal([\"a\"], [\"a\", \"b\"]); // false\n   */\n\t\tequal: function equal(a, b) {\n\t\t\treturn JSON.stringify(a) === JSON.stringify(b);\n\t\t},\n\n\t\t/**\n   * Fills `obj` with the evalution of `arg`, optionally from `start` to `offset`\n   *\n   * @method fill\n   * @memberOf array\n   * @param  {Array}  obj   Array to fill\n   * @param  {Mixed}  arg   String, Number of Function to fill with\n   * @param  {Number} start [Optional] Index to begin filling at\n   * @param  {Number} end   [Optional] Offset from start to stop filling at\n   * @return {Array}        Filled Array\n   * @example\n   * let myArray = [\"a\", \"b\", \"c\"];\n   *\n   * array.fill(myArray, function (i) { return i + \"a\"; });\n   * myArray[0]; // \"aa\"\n   */\n\t\tfill: function fill(obj, arg, start, offset) {\n\t\t\tvar l = obj.length,\n\t\t\t    i = !isNaN(start) ? start : 0,\n\t\t\t    nth = !isNaN(offset) ? i + offset : l - 1;\n\n\t\t\tif (nth > l - 1) {\n\t\t\t\tnth = l - 1;\n\t\t\t}\n\n\t\t\tif (typeof arg === \"function\") {\n\t\t\t\twhile (i <= nth) {\n\t\t\t\t\tobj[i] = arg(obj[i]);\n\t\t\t\t\ti++;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\twhile (i <= nth) {\n\t\t\t\t\tobj[i] = arg;\n\t\t\t\t\ti++;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn obj;\n\t\t},\n\n\t\t/**\n   * Returns the first Array index\n   *\n   * @method first\n   * @memberOf array\n   * @param  {Array} obj The array\n   * @return {Mixed}     The first node of the array\n   * @example\n   * array.first([\"a\", \"b\"]); // \"a\"\n   */\n\t\tfirst: function first(obj) {\n\t\t\treturn obj[0];\n\t\t},\n\n\t\t/**\n   * Flattens a 2D Array\n   *\n   * @method flat\n   * @memberOf array\n   * @param  {Array} obj 2D Array to flatten\n   * @return {Array}     Flatten Array\n   * @example\n   * array.flat([[0, 1], [2, 3]]); // [0, 1, 2, 3]\n   */\n\t\tflat: function flat(obj) {\n\t\t\treturn obj.reduce(function (a, b) {\n\t\t\t\treturn a.concat(b);\n\t\t\t}, []);\n\t\t},\n\n\t\t/**\n   * Iterates `obj` and executes `fn` with arguments [`value`, `index`].\n   * Returning `false` halts iteration.\n   *\n   * @method forEach\n   * @memberOf array\n   * @see array.each\n   * @param  {Array}    obj Array to iterate\n   * @param  {Function} fn  Function to execute on index values\n   * @param  {Function} ctx [Optional] Context to execute `fn`\n   * @return {Array}        Array\n   * @example\n   * array.forEach([...], function (...) { ... });\n   * array.forEach([...], function (...) { ... }, true, 100); // processing batches of a 100\n   */\n\t\tforEach: function forEach(obj, fn) {\n\t\t\tvar ctx = arguments.length <= 2 || arguments[2] === undefined ? fn : arguments[2];\n\t\t\treturn (function () {\n\t\t\t\treturn array.each(obj, fn, ctx);\n\t\t\t})();\n\t\t},\n\n\t\t/**\n   * Creates a 2D Array from an Object\n   *\n   * @method fromObject\n   * @memberOf array\n   * @param  {Object} obj Object to convert\n   * @return {Array}      2D Array\n   * @example\n   * array.fromObject({name: \"John\", sex: \"male\"}); // [[\"name\", \"John\"], [\"sex\", \"male\"]]\n   */\n\t\tfromObject: function fromObject(obj) {\n\t\t\treturn array.mingle(Object.keys(obj), array.cast(obj));\n\t\t},\n\n\t\t/**\n   * Facade of indexOf\n   *\n   * @method index\n   * @memberOf array\n   * @param  {Array} obj Array to search\n   * @param  {Mixed} arg Value to find index of\n   * @return {Number}    The position of arg in instance\n   * @example\n   * array.index([\"a\", \"b\", \"c\"], \"b\"); // 1\n   */\n\t\tindex: function index(obj, arg) {\n\t\t\treturn obj.indexOf(arg);\n\t\t},\n\n\t\t/**\n   * Returns an Associative Array as an Indexed Array\n   *\n   * @method indexed\n   * @memberOf array\n   * @param  {Array} obj Array to index\n   * @return {Array}     Indexed Array\n   * @example\n   * let myArray = [\"a\", \"b\", \"c\"];\n   *\n   * myArray.prop = \"d\";\n   * array.indexed(myArray); [\"a\", \"b\", \"c\", \"d\"];\n   */\n\t\tindexed: function indexed(obj) {\n\t\t\treturn Object.keys(obj).map(function (key) {\n\t\t\t\treturn obj[key];\n\t\t\t});\n\t\t},\n\n\t\t/**\n   * Finds the intersections between obj1 and obj2\n   *\n   * @method intersect\n   * @memberOf array\n   * @param  {Array} obj1 Source Array\n   * @param  {Array} obj2 Comparison Array\n   * @return {Array}      Array of the intersections\n   * @example\n   * array.intersect([\"a\", \"b\", \"d\"], [\"b\", \"c\", \"d\"]); // [\"b\", \"d\"]\n   */\n\t\tintersect: function intersect(obj1, obj2) {\n\t\t\tvar a = undefined,\n\t\t\t    b = undefined;\n\n\t\t\tif (obj1.length > obj2.length) {\n\t\t\t\ta = obj1;\n\t\t\t\tb = obj2;\n\t\t\t} else {\n\t\t\t\ta = obj2;\n\t\t\t\tb = obj1;\n\t\t\t}\n\n\t\t\treturn a.filter(function (key) {\n\t\t\t\treturn array.contains(b, key);\n\t\t\t});\n\t\t},\n\n\t\t/**\n   * Determines if an Array is empty\n   *\n   * @method isEmpty\n   * @memberOf array\n   * @param  {Array} obj Array to inspect\n   * @return {Boolean}   `true` if there's no indices\n   * @example\n   * array.isEmpty([]);    // true\n   * array.isEmpty([\"a\"]); // false\n   */\n\t\tisEmpty: function isEmpty(obj) {\n\t\t\treturn obj.length === 0;\n\t\t},\n\n\t\t/**\n   * Iterates an Array using an Iterator\n   *\n   * @method iterate\n   * @memberOf array\n   * @param  {Array} obj Array to iterate\n   * @return {Array}     Array to iterate\n   */\n\t\titerate: function iterate(obj, fn) {\n\t\t\tvar itr = array.iterator(obj),\n\t\t\t    i = -1,\n\t\t\t    item = undefined,\n\t\t\t    next = undefined;\n\n\t\t\tdo {\n\t\t\t\titem = itr.next();\n\n\t\t\t\tif (!item.done) {\n\t\t\t\t\tnext = fn(item.value, ++i);\n\t\t\t\t} else {\n\t\t\t\t\tnext = false;\n\t\t\t\t}\n\t\t\t} while (next !== false);\n\n\t\t\treturn obj;\n\t\t},\n\n\t\t/**\n   * Creates an Array generator to iterate the indices\n   *\n   * @method iterator\n   * @memberOf array\n   * @param  {Array} obj Array to iterate\n   * @return {Function}  Generator\n   */\n\t\titerator: function iterator(obj) {\n\t\t\tvar nth = obj.length,\n\t\t\t    i = -1;\n\n\t\t\treturn {\n\t\t\t\tnext: function next() {\n\t\t\t\t\tvar result = undefined;\n\n\t\t\t\t\tif (++i < nth) {\n\t\t\t\t\t\tresult = { done: false, value: obj[i] };\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult = { done: true };\n\t\t\t\t\t}\n\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\t\t\t};\n\t\t},\n\n\t\t/**\n   * Keeps every element of `obj` for which `fn` evaluates to true\n   *\n   * @method keepIf\n   * @memberOf array\n   * @param  {Array}    obj Array to iterate\n   * @param  {Function} fn  Function to test indices against\n   * @return {Array}        Array\n   * @example\n   * let myArray = [\"a\", \"b\", \"c\"];\n   *\n   * array.keepIf(myArray, function (i ) { return /a|c/.test( i); });\n   * myArray[1]; // \"c\"\n   */\n\t\tkeepIf: function keepIf(obj, fn) {\n\t\t\tvar result = undefined,\n\t\t\t    remove = undefined;\n\n\t\t\tresult = obj.filter(fn);\n\t\t\tremove = array.diff(obj, result);\n\n\t\t\tarray.each(remove, function (i) {\n\t\t\t\tarray.remove(obj, array.index(obj, i));\n\t\t\t});\n\n\t\t\treturn obj;\n\t\t},\n\n\t\t/**\n   * Returns the last index of the Array\n   *\n   * @method last\n   * @memberOf array\n   * @param  {Array}  obj Array\n   * @param  {Number} arg [Optional] Negative offset from last index to return\n   * @return {Mixed}      Last index(s) of Array\n   * @example\n   * let myArray = [1, 2, 3, 4];\n   *\n   * array.last(myArray);    // 4\n   * array.last(myArray, 2); // [3, 4]\n   */\n\t\tlast: function last(obj, arg) {\n\t\t\tvar n = obj.length - 1,\n\t\t\t    larg = arg;\n\n\t\t\tif (larg >= n + 1) {\n\t\t\t\treturn obj;\n\t\t\t} else if (isNaN(larg) || larg === 1) {\n\t\t\t\treturn obj[n];\n\t\t\t} else {\n\t\t\t\t--larg;\n\t\t\t\treturn array.limit(obj, n - larg, n);\n\t\t\t}\n\t\t},\n\n\t\t/**\n   * Returns a limited range of indices from the Array\n   *\n   * @method limit\n   * @memberOf array\n   * @param  {Array}  obj   Array to iterate\n   * @param  {Number} start Starting index\n   * @param  {Number} range Number of indices to return\n   * @return {Array}        Array of indices\n   * @example\n   * let myArray = [1, 2, 3, 4];\n   *\n   * array.limit(myArray, 0, 2); // [1, 2]\n   * array.limit(myArray, 2, 2); // [3, 4]\n   */\n\t\tlimit: function limit(obj) {\n\t\t\tvar start = arguments.length <= 1 || arguments[1] === undefined ? 0 : arguments[1];\n\t\t\tvar range = arguments.length <= 2 || arguments[2] === undefined ? 1 : arguments[2];\n\n\t\t\tvar result = [],\n\t\t\t    i = start - 1,\n\t\t\t    nth = start + range,\n\t\t\t    max = obj.length;\n\n\t\t\tif (max > 0) {\n\t\t\t\twhile (++i < nth && i < max) {\n\t\t\t\t\tresult.push(obj[i]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn result;\n\t\t},\n\n\t\t/**\n   * Finds the maximum value in an Array\n   *\n   * @method max\n   * @memberOf array\n   * @param  {Array} obj Array to process\n   * @return {Mixed}     Number, String, etc.\n   * @example\n   * array.max([5, 3, 9, 1, 4]); // 9\n   */\n\t\tmax: function max(obj) {\n\t\t\treturn array.last(array.sorted(array.clone(obj)));\n\t\t},\n\n\t\t/**\n   * Finds the mean of an Array (of numbers)\n   *\n   * @method mean\n   * @memberOf array\n   * @param  {Array} obj Array to process\n   * @return {Number}    Mean of the Array (float or integer)\n   * @example\n   * array.mean([1, 3, 5]); // 3\n   */\n\t\tmean: function mean(obj) {\n\t\t\treturn obj.length > 0 ? array.sum(obj) / obj.length : undefined;\n\t\t},\n\n\t\t/**\n   * Finds the median value of an Array (of numbers)\n   *\n   * @method median\n   * @memberOf array\n   * @param  {Array} obj Array to process\n   * @return {Number}    Median number of the Array (float or integer)\n   * @example\n   * array.median([5, 1, 3, 8]); // 4\n   * array.median([5, 1, 3]);    // 3\n   */\n\t\tmedian: function median(obj) {\n\t\t\tvar lobj = array.sorted(array.clone(obj)),\n\t\t\t    nth = lobj.length,\n\t\t\t    mid = Math.floor(nth / 2);\n\n\t\t\treturn nth % 2 !== 0 ? lobj[mid] : (lobj[mid - 1] + lobj[mid]) / 2;\n\t\t},\n\n\t\t/**\n   * Merges `arg` into `obj`, excluding duplicate indices\n   *\n   * @method merge\n   * @memberOf array\n   * @param  {Array} a Array to receive indices\n   * @param  {Array} b Array to merge\n   * @return {Array}   First argument\n   * @example\n   * let a = [\"a\", \"b\", \"c\"],\n   *     b = [\"d\"];\n   *\n   * array.merge(a, b) // [\"a\", \"b\", \"c\", \"d\"];\n   */\n\t\tmerge: function merge(a, b) {\n\t\t\tarray.each(b, function (i) {\n\t\t\t\tarray.add(a, i);\n\t\t\t});\n\n\t\t\treturn a;\n\t\t},\n\n\t\t/**\n   * Finds the minimum value in an Array\n   *\n   * @method min\n   * @memberOf array\n   * @param  {Array} obj Array to process\n   * @return {Mixed}     Number, String, etc.\n   * @example\n   * array.min([5, 3, 9, 1, 4]); // 1\n   */\n\t\tmin: function min(obj) {\n\t\t\treturn array.sorted(array.clone(obj))[0];\n\t\t},\n\n\t\t/**\n   * Mingles Arrays and returns a 2D Array\n   *\n   * @method mingle\n   * @memberOf array\n   * @param  {Array} obj1 Array to mingle\n   * @param  {Array} obj2 Array to mingle\n   * @return {Array}      2D Array\n   * @example\n   * let a = [\"a\", \"b\"],\n   *     b = [\"c\", \"d\"];\n   *\n   * array.mingle(a, b); // [[\"a\", \"c\"], [\"b\", \"d\"]]\n   */\n\t\tmingle: function mingle(a, b) {\n\t\t\treturn a.map(function (i, idx) {\n\t\t\t\treturn [i, b[idx]];\n\t\t\t});\n\t\t},\n\n\t\t/**\n   * Finds the mode value of an Array\n   *\n   * @method mode\n   * @memberOf array\n   * @param  {Array} obj Array to process\n   * @return {Mixed}     Mode value of the Array\n   * @example\n   * array.mode([1, 3, 7, 1, 2, 10, 7, 7, 3, 10]);     // 7\n   * array.mode([1, 3, 7, 1, 2, 10, 7, 7, 3, 10, 10]); // [7, 10]\n   */\n\t\tmode: function mode(obj) {\n\t\t\tvar values = {},\n\t\t\t    count = 0,\n\t\t\t    mode = [],\n\t\t\t    nth = undefined,\n\t\t\t    result = undefined;\n\n\t\t\t// Counting values\n\t\t\tarray.each(obj, function (i) {\n\t\t\t\tif (!isNaN(values[i])) {\n\t\t\t\t\tvalues[i]++;\n\t\t\t\t} else {\n\t\t\t\t\tvalues[i] = 1;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// Finding the highest occurring count\n\t\t\tcount = array.max(array.cast(values));\n\n\t\t\t// Finding values that match the count\n\t\t\tObject.keys(values).forEach(function (k) {\n\t\t\t\tvar v = values[k];\n\n\t\t\t\tif (v === count) {\n\t\t\t\t\tmode.push(Number(k));\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// Determining the result\n\t\t\tnth = mode.length;\n\n\t\t\tif (nth > 0) {\n\t\t\t\tresult = nth === 1 ? mode[0] : array.sorted(mode);\n\t\t\t}\n\n\t\t\treturn result;\n\t\t},\n\n\t\t/**\n   * Finds the range of the Array (of numbers) values\n   *\n   * @method range\n   * @memberOf array\n   * @param  {Array} obj Array to process\n   * @return {Number}    Range of the array (float or integer)\n   * @example\n   * array.range([5, 1, 3, 8]); // 7\n   */\n\t\trange: function range(obj) {\n\t\t\treturn array.max(obj) - array.min(obj);\n\t\t},\n\n\t\t/**\n   * Searches a 2D Array `obj` for the first match of `arg` as a second index\n   *\n   * @method rassoc\n   * @memberOf array\n   * @param  {Array} obj 2D Array to search\n   * @param  {Mixed} arg Primitive to find\n   * @return {Mixed}     Array or undefined\n   * @example\n   * array.rassoc([[1, 3], [7, 2], [4, 3]], 3); // [1, 3]\n   */\n\t\trassoc: function rassoc(obj, arg) {\n\t\t\tvar result = undefined;\n\n\t\t\tarray.each(obj, function (i) {\n\t\t\t\tif (i[1] === arg) {\n\t\t\t\t\tresult = array.clone(i);\n\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\treturn result;\n\t\t},\n\n\t\t/**\n   * Returns Array containing the items in `obj` for which `fn()` is not true\n   *\n   * @method reject\n   * @memberOf array\n   * @param  {Array}    obj Array to iterate\n   * @param  {Function} fn  Function to execute against `obj` indices\n   * @return {Array}        Array of indices which fn() is not true\n   * @example\n   * array.reject([0, 1, 2, 3, 4, 5], function (i) { return i % 2 > 0; }); // [0, 2, 4]\n   */\n\t\treject: function reject(obj, fn) {\n\t\t\treturn array.diff(obj, obj.filter(fn));\n\t\t},\n\n\t\t/**\n   * Removes indices from an Array without recreating it\n   *\n   * @method remove\n   * @memberOf array\n   * @param  {Array}  obj   Array to remove from\n   * @param  {Mixed}  start Starting index, or value to find within obj\n   * @param  {Number} end   [Optional] Ending index\n   * @return {Array}        Modified Array\n   * @example\n   * let myArray = [\"a\", \"b\", \"c\", \"d\", \"e\"];\n   *\n   * array.remove(myArray, 2, 3);\n   * myArray[2]; // \"e\"\n   */\n\t\tremove: function remove(obj, start, end) {\n\t\t\tif (isNaN(start)) {\n\t\t\t\tstart = array.index(obj, start);\n\n\t\t\t\tif (start === -1) {\n\t\t\t\t\treturn obj;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tstart = start || 0;\n\t\t\t}\n\n\t\t\tvar length = obj.length;\n\t\t\tvar remaining = obj.slice((end || start) + 1 || length);\n\n\t\t\tobj.length = start < 0 ? length + start : start;\n\t\t\tobj.push.apply(obj, remaining);\n\n\t\t\treturn obj;\n\t\t},\n\n\t\t/**\n   * Deletes every element of `obj` for which `fn` evaluates to true\n   *\n   * @method removeIf\n   * @memberOf array\n   * @param  {Array}    obj Array to iterate\n   * @param  {Function} fn  Function to test indices against\n   * @return {Array}        Array\n   * @example\n   * let myArray = [\"a\", \"b\", \"c\"];\n   *\n   * array.removeIf(myArray, function (i ) { return /a|c/.test( i); });\n   * myArray[0]; // \"b\"\n   */\n\t\tremoveIf: function removeIf(obj, fn) {\n\t\t\tvar remove = obj.filter(fn);\n\n\t\t\tarray.each(remove, function (i) {\n\t\t\t\tarray.remove(obj, array.index(obj, i));\n\t\t\t});\n\n\t\t\treturn obj;\n\t\t},\n\n\t\t/**\n   * Deletes elements of `obj` until `fn` evaluates to false\n   *\n   * @method removeWhile\n   * @memberOf array\n   * @param  {Array}    obj Array to iterate\n   * @param  {Function} fn  Function to test indices against\n   * @return {Array}        Array\n   * @example\n   * let myArray = [\"a\", \"b\", \"c\"];\n   *\n   * array.removeWhile(myArray, function (i ) { return /a|c/.test( i); });\n   * myArray[0];     // \"b\"\n   * myArray.length; // 2\n   */\n\t\tremoveWhile: function removeWhile(obj, fn) {\n\t\t\tvar remove = [];\n\n\t\t\tarray.iterate(obj, function (i) {\n\t\t\t\tif (fn(i) !== false) {\n\t\t\t\t\tremove.push(i);\n\t\t\t\t} else {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tarray.iterate(remove, function (i) {\n\t\t\t\tarray.remove(obj, array.index(obj, i));\n\t\t\t});\n\n\t\t\treturn obj;\n\t\t},\n\n\t\t/**\n   * Replaces the contents of `obj1` with `obj2`\n   *\n   * @method replace\n   * @memberOf array\n   * @param  {Array} obj1 Array to modify\n   * @param  {Array} obj2 Array to values to push into `obj1`\n   * @return {Array}      Array to modify\n   * @example\n   * let myArray = [\"a\", \"b\", \"c\"];\n   *\n   * array.replace(myArray, [true, false]);\n   * myArray[0];     // true\n   * myArray.length; // 2\n   */\n\t\treplace: function replace(a, b) {\n\t\t\tarray.remove(a, 0, a.length);\n\t\t\tarray.each(b, function (i) {\n\t\t\t\ta.push(i);\n\t\t\t});\n\n\t\t\treturn a;\n\t\t},\n\n\t\t/**\n   * Returns the \"rest\" of `obj` from `arg`\n   *\n   * @method rest\n   * @memberOf array\n   * @param  {Array}  obj Array to process\n   * @param  {Number} arg [Optional] Start position of subset of `obj` (positive number only)\n   * @return {Array}      Array of a subset of `obj`\n   * @example\n   * array.rest([1, 2, 3, 4, 5, 6]);    // [2, 3, 4, 5, 6]\n   * array.rest([1, 2, 3, 4, 5, 6], 3); // [4, 5, 6]\n   */\n\t\trest: function rest(obj) {\n\t\t\tvar arg = arguments.length <= 1 || arguments[1] === undefined ? 1 : arguments[1];\n\n\t\t\tif (arg < 1) {\n\t\t\t\targ = 1;\n\t\t\t}\n\n\t\t\treturn array.limit(obj, arg, obj.length);\n\t\t},\n\n\t\t/**\n   * Finds the last index of `arg` in `obj`\n   *\n   * @method rindex\n   * @memberOf array\n   * @param  {Array} obj Array to search\n   * @param  {Mixed} arg Primitive to find\n   * @return {Mixed}     Index or undefined\n   * @example\n   * array.rindex([1, 2, 3, 2, 1], 2); // 3\n   */\n\t\trindex: function rindex(obj, arg) {\n\t\t\tvar result = -1;\n\n\t\t\tarray.each(obj, function (i, idx) {\n\t\t\t\tif (i === arg) {\n\t\t\t\t\tresult = idx;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\treturn result;\n\t\t},\n\n\t\t/**\n   * Returns new Array with `arg` moved to the first index\n   *\n   * @method rotate\n   * @memberOf array\n   * @param  {Array}  obj Array to rotate\n   * @param  {Number} arg Index to become the first index, if negative the rotation is in the opposite direction\n   * @return {Array}      Newly rotated Array\n   * @example\n   * array.rotate([0, 1, 2, 3, 4],  3)[0] // 2;\n   * array.rotate([0, 1, 2, 3, 4], -2)[0] // 3;\n   */\n\t\trotate: function rotate(obj, arg) {\n\t\t\tvar nth = obj.length,\n\t\t\t    result = undefined;\n\n\t\t\tif (arg === 0) {\n\t\t\t\tresult = obj;\n\t\t\t} else {\n\t\t\t\tif (arg < 0) {\n\t\t\t\t\targ += nth;\n\t\t\t\t} else {\n\t\t\t\t\targ--;\n\t\t\t\t}\n\n\t\t\t\tresult = array.limit(obj, arg, nth).concat(array.limit(obj, 0, arg));\n\t\t\t}\n\n\t\t\treturn result;\n\t\t},\n\n\t\t/**\n   * Generates a series Array\n   *\n   * @method series\n   * @memberOf array\n   * @param  {Number} start  Start value the series\n   * @param  {Number} end    [Optional] The end of the series\n   * @param  {Number} offset [Optional] Offset for indices, default is 1\n   * @return {Array}         Array of new series\n   * @example\n   * array.series(0, 5);     // [0, 1, 2, 3, 4]\n   * array.series(0, 25, 5); // [0, 5, 10, 15, 20]\n   */\n\t\tseries: function series() {\n\t\t\tvar start = arguments.length <= 0 || arguments[0] === undefined ? 0 : arguments[0];\n\t\t\tvar end = arguments.length <= 1 || arguments[1] === undefined ? start : arguments[1];\n\t\t\tvar offset = arguments.length <= 2 || arguments[2] === undefined ? 1 : arguments[2];\n\t\t\treturn (function () {\n\t\t\t\tvar result = [],\n\t\t\t\t    n = -1,\n\t\t\t\t    lstart = start,\n\t\t\t\t    nth = Math.max(0, Math.ceil((end - start) / offset));\n\n\t\t\t\twhile (++n < nth) {\n\t\t\t\t\tresult[n] = lstart;\n\t\t\t\t\tlstart += offset;\n\t\t\t\t}\n\n\t\t\t\treturn result;\n\t\t\t})();\n\t\t},\n\n\t\t/**\n   * Sorts the Array by parsing values\n   *\n   * @method sort\n   * @memberOf array\n   * @param  {Mixed} a Argument to compare\n   * @param  {Mixed} b Argument to compare\n   * @return {Number}  Number indicating sort order\n   * @example\n   * array.sort(2, 3); // -1\n   */\n\t\tsort: function sort(a, b) {\n\t\t\tvar types = { a: typeof a, b: typeof b },\n\t\t\t    c = undefined,\n\t\t\t    d = undefined,\n\t\t\t    result = undefined;\n\n\t\t\tif (types.a === \"number\" && types.b === \"number\") {\n\t\t\t\tresult = a - b;\n\t\t\t} else {\n\t\t\t\tc = a.toString();\n\t\t\t\td = b.toString();\n\n\t\t\t\tif (c < d) {\n\t\t\t\t\tresult = -1;\n\t\t\t\t} else if (c > d) {\n\t\t\t\t\tresult = 1;\n\t\t\t\t} else if (types.a === types.b) {\n\t\t\t\t\tresult = 0;\n\t\t\t\t} else if (types.a === \"boolean\") {\n\t\t\t\t\tresult = -1;\n\t\t\t\t} else {\n\t\t\t\t\tresult = 1;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn result;\n\t\t},\n\n\t\t/**\n   * Sorts `obj` using `array.sort`\n   *\n   * @method sorted\n   * @memberOf array\n   * @param  {Array} obj Array to sort\n   * @return {Array}     Sorted Array\n   * @example\n   * let myArray = [5, 9, 2, 4];\n   *\n   * array.sorted(myArray);\n   * myArray[0]; // 2\n   */\n\t\tsorted: function sorted(obj) {\n\t\t\treturn obj.sort(array.sort);\n\t\t},\n\n\t\t/**\n   * Splits an Array by divisor\n   *\n   * @method split\n   * @memberOf array\n   * @param  {Array}  obj     Array to process\n   * @param  {Number} divisor Integer to divide the Array by\n   * @return {Array}          Split Array\n   * @example\n   * let myArray = [],\n   *     i       = -1,\n   *     results;\n   *\n   * while (++i < 100) {\n  \t\t *   myArray.push(i + 1);\n  \t\t * }\n   *\n   * results = array.split(myArray, 21);\n   * results.length;     // 21\n   * results[0].length;  // 5\n   * results[19].length; // 4\n   * results[19][0];     // 99\n   * results[20].length; // 1\n   * results[20][0];     // 100\n   */\n\t\tsplit: function split(obj, divisor) {\n\t\t\tvar result = [],\n\t\t\t    total = obj.length,\n\t\t\t    nth = Math.ceil(total / divisor),\n\t\t\t    low = Math.floor(total / divisor),\n\t\t\t    lower = Math.ceil(total / nth),\n\t\t\t    lowered = false,\n\t\t\t    start = 0,\n\t\t\t    i = -1;\n\n\t\t\t// Finding the fold\n\t\t\tif (Math.abs(total - divisor * nth) > nth) {\n\t\t\t\tlower = total - low * divisor + low - 1;\n\t\t\t} else if (total % divisor > 0 && lower * nth >= total) {\n\t\t\t\tlower--;\n\t\t\t}\n\n\t\t\twhile (++i < divisor) {\n\t\t\t\tif (i > 0) {\n\t\t\t\t\tstart = start + nth;\n\t\t\t\t}\n\n\t\t\t\tif (!lowered && lower < divisor && i === lower) {\n\t\t\t\t\t--nth;\n\t\t\t\t\tlowered = true;\n\t\t\t\t}\n\n\t\t\t\tresult.push(array.limit(obj, start, nth));\n\t\t\t}\n\n\t\t\treturn result;\n\t\t},\n\n\t\t/**\n   * Finds the standard deviation of an Array (of numbers)\n   *\n   * @method stddev\n   * @memberOf array\n   * @param  {Array} obj Array to process\n   * @return {Number}    Standard deviation of the Array (float or integer)\n   * @example\n   * array.stddev([1, 3, 5]); // 1.632993161855452\n   */\n\t\tstddev: function stddev(obj) {\n\t\t\treturn Math.sqrt(array.variance(obj));\n\t\t},\n\n\t\t/**\n   * Gets the summation of an Array of numbers\n   *\n   * @method sum\n   * @memberOf array\n   * @param  {Array} obj Array to sum\n   * @return {Number}    Summation of Array\n   * @example\n   * array.sum([2, 4, 3, 1]); // 10\n   */\n\t\tsum: function sum(obj) {\n\t\t\tvar result = 0;\n\n\t\t\tif (obj.length > 0) {\n\t\t\t\tresult = obj.reduce(function (a, b) {\n\t\t\t\t\treturn a + b;\n\t\t\t\t}, 0);\n\t\t\t}\n\n\t\t\treturn result;\n\t\t},\n\n\t\t/**\n   * Takes the first `n` indices from `obj`\n   *\n   * @method take\n   * @memberOf array\n   * @param  {Array}  obj Array to process\n   * @param  {Number} n   Offset from 0 to return\n   * @return {Array}      Subset of `obj`\n   * @example\n   * array.take([1, 2, 3, 4], 2); // [1, 2]\n   */\n\t\ttake: function take(obj, n) {\n\t\t\treturn array.limit(obj, 0, n);\n\t\t},\n\n\t\t/**\n   * Casts an Array to Object\n   *\n   * @method toObject\n   * @memberOf array\n   * @param  {Array} ar Array to transform\n   * @return {Object}   New object\n   * @example\n   * array.toObject([\"abc\", \"def\"]); // {0: \"abc\", 1: \"def\"}\n   */\n\t\ttoObject: function toObject(ar) {\n\t\t\tvar obj = {},\n\t\t\t    i = ar.length;\n\n\t\t\twhile (i--) {\n\t\t\t\tobj[i.toString()] = ar[i];\n\t\t\t}\n\n\t\t\treturn obj;\n\t\t},\n\n\t\t/**\n   * Gets the total keys in an Array\n   *\n   * @method total\n   * @memberOf array\n   * @param  {Array} obj Array to find the length of\n   * @return {Number}    Number of keys in Array\n   * @example\n   * let myArray = [true, true, false];\n   *\n   * myArray.extra = true;\n   * array.total(myArray); // 4\n   */\n\t\ttotal: function total(obj) {\n\t\t\treturn array.indexed(obj).length;\n\t\t},\n\n\t\t/**\n   * Returns an Array of unique indices of `obj`\n   *\n   * @method unique\n   * @memberOf array\n   * @param  {Array} obj Array to process\n   * @return {Array}     Array of unique indices\n   * @example\n   * array.unique([\"a\", \"b\", \"a\", \"c\", \"b\", \"d\"]); // [\"a\", \"b\", \"c\", \"d\"]\n   */\n\t\tunique: function unique(obj) {\n\t\t\tvar result = [];\n\n\t\t\tarray.each(obj, function (i) {\n\t\t\t\tarray.add(result, i);\n\t\t\t});\n\n\t\t\treturn result;\n\t\t},\n\n\t\t/**\n   * Finds the variance of an Array (of numbers)\n   *\n   * @method variance\n   * @memberOf array\n   * @param  {Array} obj Array to process\n   * @return {Number}    Variance of the Array (float or integer)\n   * @example\n   * array.variance([1, 3, 5]); // 2.6666666666666665\n   */\n\t\tvariance: function variance(obj) {\n\t\t\tvar nth = obj.length,\n\t\t\t    n = 0,\n\t\t\t    mean = undefined,\n\t\t\t    result = undefined;\n\n\t\t\tif (nth > 0) {\n\t\t\t\tmean = array.mean(obj);\n\n\t\t\t\tarray.each(obj, function (i) {\n\t\t\t\t\tn += Math.pow(i - mean, 2);\n\t\t\t\t});\n\n\t\t\t\tresult = n / nth;\n\t\t\t} else {\n\t\t\t\tresult = n;\n\t\t\t}\n\n\t\t\treturn result;\n\t\t},\n\n\t\t/**\n   * Library version\n   *\n   * @type {String}\n   */\n\t\tversion: \"2.0.0\",\n\n\t\t/**\n   * Converts any arguments to Arrays, then merges elements of `obj` with corresponding elements from each argument\n   *\n   * @method zip\n   * @memberOf array\n   * @param  {Array} obj  Array to transform\n   * @param  {Mixed} args Argument instance or Array to merge\n   * @return {Array}      Array\n   * @example\n   * array.zip([0, 1], 1); // [[0, 1], [1, null]]\n   */\n\t\tzip: function zip(obj, args) {\n\t\t\tvar result = [];\n\n\t\t\t// Preparing args\n\t\t\tif (!(args instanceof Array)) {\n\t\t\t\targs = typeof args === \"object\" ? array.cast(args) : [args];\n\t\t\t}\n\n\t\t\tarray.each(args, function (i, idx) {\n\t\t\t\tif (!(i instanceof Array)) {\n\t\t\t\t\targs[idx] = [i];\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// Building result Array\n\t\t\tarray.each(obj, function (i, idx) {\n\t\t\t\tresult[idx] = [i];\n\n\t\t\t\tarray.each(args, function (x) {\n\t\t\t\t\tresult[idx].push(x[idx] || null);\n\t\t\t\t});\n\t\t\t});\n\n\t\t\treturn result;\n\t\t}\n\t};\n\n\t// Node, AMD & window supported\n\tif (typeof exports !== \"undefined\") {\n\t\tmodule.exports = array;\n\t} else if (typeof define === \"function\") {\n\t\tdefine(function () {\n\t\t\treturn array;\n\t\t});\n\t} else {\n\t\tglobal.retsu = array;\n\t}\n})(typeof global !== \"undefined\" ? global : window);\n"]}